.tagSelector h1{color:#0c0; font-size:20px;}
.tagSelector p{color:#0cf; font-size:15px;}
.tagSelector span{color:#336; font-size:13px;}

/*태그선택자 사용법*/

.idSelector p#paragraph1{font-size:16px; text-decoration:underline;}
.idSelector p#paragraph2{color:#09F; text-decoration:line-through;}
.idSelector p#paragraph3{font-weight:bold; text-decoration:overline;}

/*ID선택자 사용법*/

.classSelector p.f_size{font-size:20px;}
.classSelector p.f_weight{font-weight:bold;}
.classSelector p.f_color{color:#9cf;}

/*CLASS 선택자 사용법 + 다중 클래스 지정 */

.attrSelector fieldset{
    border: 1px solid #555;
    background-color: slateblue;
}
.attrSelector fieldset legend{
    border: 1px solid slateblue;
    background-color: #555; color: white;
    padding: 10px;
}
.attrSelector fieldset ul{
    margin: 0; padding: 0; list-style: none;
}
.attrSelector fieldset ul li{
    color: white; font-size: 14px;
    line-height: 30px;
}
.attrSelector fieldset ul li label{
    width: 100px; display: inline-block;
}
.attrSelector fieldset ul li input{
    padding: 5px; vertical-align: middle;
}
.attrSelector fieldset ul li input[type='text']{
    background-color: salmon; border: 3px solid lightcoral; color: maroon;
}
.attrSelector fieldset ul li label[for='pwField']{
    color: lime;
}
.attrSelector fieldset ul li input[type='password']{
    background-color: lightgreen; border: 3px solid lime; color: green;
}
.attrSelector fieldset ul li input[type='radio']{
    background-color: yellow; width: 25px; height: 25px;
    border: 5px solid black;
}
.attrSelector fieldset ul li input[type='checkbox']{
    background-color: yellowgreen; width: 25px; height: 25px;
    border: 5px solid black;
}
/* 
    ? 동작하는 input들은 기존 browser에서 설정된 style이 존재 하기 때문에 임의설정불가.
    ! 변경하는 법은 추후에...
*/
.directSelector > h1{
    font-size: 28px; color: #66f;
}
.directSelector > span{
    font-size: 22px; color: #906;
}
/* 
    구조적으로 다른 동일 Tag를 제외하고, 직계 자손 Tag에 동일한 style 적용.
*/

.sameSelector h1~h2{
    background-color: #333;
}
.sameSelector h1+h2{
    font-size: 40px; color: #fcf;
}
/* 
    동위선택자 A+B는 A바로 뒤 B, A~B는 A 뒤에 모든 B.
*/
.stringAttrSelector img[src$=png]{
    width: 100px; height: 100px; border: 3px solid #f00;
}
.stringAttrSelector img[src$=jpg]{
    width: 200px; height: 200px; border: 5px solid #0f0;
}
.stringAttrSelector img[src$=gif]{
    width: 300px; height: 300px; border: 10px solid #00f;
}
/* todo. 1. jpg 들 만 따로 css 적용. 2. gif 들만 따로 css 적용. */ 

/*
    ?속성값일치선택자.
    ? ^= : 해당 단어로 시작하는 것만 선택.
    ? $= : 해당 단어로 끝나는 대상 선택.
    ? *= : 해당 단어가 들어가는 모든 대상 선택. (전,후 상관없음.)
    ? ~= : 띄어쓰기 기준. 해당 단어 포함.
      |= : 해당 단어로 시작하거나 -으로 구분되는 대상 선택.
*/
.sameAttrSelector h1[title *= "제목"]{
    color: red;
}
.sameAttrSelector h2[title ^= "남자"]{
    color: blue;
}
.sameAttrSelector h2[title $= "여자"]{
    color: pink;
}

.eventSelector{
    margin-bottom: 50px;
}
.eventSelector a:link{
    font-size: 12px; color: red;
}
.eventSelector a:hover{
    font-size: 20px; color: green;
}
.eventSelector a:active{
    font-size: 30px; color: blue;
}
.eventSelector a:visited{
    font-size: 40px; color: yellow;
}

.statusSelector input[type='checkBox'] + label{
    display: inline-block; transition-duration: 0.75s;
    height: 20px; overflow-y: hidden;
    /* font-size: 16px; */
}
.statusSelector input[type='checkBox']:checked + label{
    height: 0px;
    /* font-size: 0px; ? font-size: 6.888888888px;*/
}
.statusSelector input[type='text']:focus{
    border: 10px solid red;
}

.statusSelector input[type='text']:enabled{
    background-color: black; color: white;
}
.statusSelector input[type='password']:disabled::placeholder{
    background-color: deeppink; color: black;
}
/*
input 상태에 따라 대상을 작동 시킬 수 있다.
1. checkbox의 상태가 checked 일 경우 바로 뒤에 label을 height:0px로 만든다.
(상태옵션은 :checked 체크된 input 상태 , :focus 초점이 맞춰진 input 상태 , 
:enabled 사용가능한 input 상태, :disabled 사용 불가능한 input 상태)

2. label의 기본설정을 잡는다. 이 부분에서 height의 값이 있어야만 에니메이션이
일어난다.
또한 display옵션을 block 계열로 잡아야하며, overflow의 값은 hidden으로 설정
해둔다.(사라지는값)
*/

.normalSelector ul{
    overflow: hidden; list-style: none; padding: 0; margin: 30px 0;
}
.normalSelector ul li{
    width: 14.28%; box-sizing: border-box; margin: 0; padding: 15px;
    float: left; text-align: center;
}
.normalSelector ul :nth-child(2n+1){
    background-color: #444; color: white;
}
.normalSelector ul :nth-child(2n){
    background-color: #0c0;
}
/*nth-child 에서 (odd) 값은 홀수를 , (even)은 짝수를 지정 할 수 있다. js는 반대 (0부터인식)*/

.normalSelector ul :first-child{
    border-radius: 25px 0 0 25px;
}
.normalSelector ul :last-child{
    border-radius: 0 25px 25px 0;
}

.shapeSelector h1:nth-of-type(2){
    color: #30f;
}
.shapeSelector h2:nth-of-type(2){
    color: #0c6;
}
.shapeSelector h3:nth-of-type(1){
    color: #f06;
}

.textSelector h1::first-letter{
    font-size: 100px; color: #30f;
}
.textSelector p::first-line{
    color: #0f0; line-height: 30px;
    font-size: 14px; text-decoration: underline;
}
.backandfrontSelector p{
    counter-increment: rint;
}
.backandfrontSelector p::before{
    content: counter(rint) ".";
}
.backandfrontSelector p::after{
    content: "-" attr(data-page) "page"; font-weight: bold; color: deeppink;
}

/*
전후 문자선택자
::before : 선택된 태그의 앞 공간을 선택한다.
::after : 선택된 태그의 뒷 공간을 선택한다.
counter-increment:rint -> rint(인수에  가까운 정수 반환) 라는 카운터 이름을 만들어 낸다.
content:counter(rint) -> 카운터가 태그의 갯수 만큼 하나씩 올라가며 출력 되게 한다.
"-" => - 를 출력해라 / attr(data-page) => data-page로 설정 되어있는 부분을 출력하라.
/ "page" => page를 출력하라.

ul , ol 등의 리스트 형식에서 count를 사용 할 때는 counter-reset을 하고 사용 하는 것을
권장
ex > counter-reset: 카운터이름 0;
.backandfrontSelector ul li{counter-increment:rint;} -> 카운터이름을 선언
.backandfrontSelector ul li{counter-reset:rint 0;} -> 카운터 초기화
.backandfrontSelector p::before{content:counter(rint) ".";} -> 카운터 시작
.backandfrontSelector p::after{content:"-" attr(data-page) "page"; font-weight:bold; color:deeppink;} -> 출력


data- 라는 것은 사용자 지정 속성으로 웹 표준에서 인정 해주는 개인 자율에 의한
속성 지정법이다.
대부분의 솔루션, 템플릿, jquery등에서 널리 이용 되고 있으니, 반드시 알아 둘 것.

ex> data-roll="listview" 라고 선언 하면 jquery mobile ui 템플릿에서 기본으로 공급하는
모바일에서의 리스트 출력 작동법 및 스타일 이 된다.
*/
.reactionSelector > *{
    color: white;
}
.reactionSelector > *::selection{
    background-color: black; color: yellow;
}

.notSelector input:not([type='submit'],[type='password']){
    background-color: red;
}
/*
	:not은 부정 선택자로써 대상을 제외한 나머지에게 해당 css를 적용시킨다.
*/
