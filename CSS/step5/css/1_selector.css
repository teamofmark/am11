.tagSelector h1{color:#0c0; font-size:20px;}
.tagSelector p{color:#0cf; font-size:15px;}
.tagSelector span{color:#336; font-size:13px;}

/*태그선택자 사용법*/

.idSelector p#paragraph1{font-size:16px; text-decoration:underline;}
.idSelector p#paragraph2{color:#09F; text-decoration:line-through;}
.idSelector p#paragraph3{font-weight:bold; text-decoration:overline;}

/*ID선택자 사용법*/

.classSelector p.f_size{font-size:20px;}
.classSelector p.f_weight{font-weight:bold;}
.classSelector p.f_color{color:#9cf;}

/*CLASS 선택자 사용법 + 다중 클래스 지정 */

.attrSelector fieldset{
    border: 1px solid #555; background-color: lightseagreen;
}
.attrSelector fieldset legend{
    border: 1px solid slateblue; background-color: #555; color: white; padding: 10px;
    border-radius: 10px 0 10px;
}
.attrSelector fieldset ul{
    margin: 0; padding: 0; list-style: none;
}
.attrSelector fieldset ul li{
    color: white; font-size: 14px; line-height: 30px; margin-bottom: 10px;
}
.attrSelector fieldset ul li label{
    width: 100px; display: inline-block;
}
.attrSelector fieldset ul li input{
    padding: 5px; vertical-align: middle;
}
.attrSelector fieldset ul li input[type='text']{
    background-color: salmon; border: 3px solid lightyellow; color: maroon;
}
/* password, radio, checkbox type에 각 배웠던 css 넣어보기 */
.attrSelector fieldset ul li input[type='password']{
    background-color: limegreen; border: 3px solid lime;
}
.attrSelector fieldset ul li input[type='radio']{
    /* background-color: black; border: 5px solid yellow; */
    accent-color: red; width: 30px; height: 30px;
}
.attrSelector fieldset ul li input[type='checkbox']{
    background-color: black; border: 5px solid yellowgreen;
}
.directSelector > h1{
    font-size: 28px; color: #66f; line-height: 44px;
}
.directSelector > span{
    font-size: 22px; color: #906; line-height: 40px;
}
.directSelector ul li{
    color: limegreen;
}
.directSelector ul > li{
    font-size: 25px;
}
.directSelector ul > li ol li{
    font-size: 15px; background-color: lightgray;
}
.directSelector ul > li ol li a{
    color: forestgreen;
}
/* 
    ? 직계선택자 >
    * 구조적으로 다른 동일 태그를 제외하고 직계 자손 태그에 동일한 스타일을 적용 할 수 있다.
*/
.sameSelector h1~h2{
    background-color: #999;
}
.sameSelector h1+h2{
    font-size: 40px; color: deeppink;
}
/* 
    ? 동위선택자
    * A ~ B : A 동위선상 내 뒤에있는 모든 B를 선택. (최초 기준이 되는 tag만 효력발생)
    * A + B : A 동위선생 내 바로 뒤에있는 B를 선택. (매 기준이 변경 됨)
*/

.stringAttrSelector img[src$='png']{
    width: 100px; border: 3px solid red;
}
/* todo 남은 img두장에 넣고싶은 css 넣어보기 (문자유형별선택자사용) */
.stringAttrSelector img[src$='jpg']{
    width: 200px; border: 5px dashed green;
}
.stringAttrSelector img[src$='gif']{
    width: 300px; border: 10px double blue;
}
.stringAttrSelector h1[title*='제목']{
    color: red;
}
.stringAttrSelector h1[title^="남자"]{
    color: blue;
}
.stringAttrSelector h1[title|="탈의실"]{
    text-decoration: underline;
}
/* 
    ? 문자유형일치선택자.- 해당 문자열 유형으로 분리 적용
    * *= : 해당 단어가 들어가는 모든 대상 선택. (전,후 상관없음.)
    * ^= : 해당 단어로 시작하는 대상 선택.
    * $= : 해당 단어로 끝나는 대상 선택.
    * |= : 해당 단어로 시작하거나 -로 구분되는 대상 선택.
    * ~= : 띄어쓰기 기준. 해당 대상 선택.
*/
.statusSelector input[type='checkbox']+label{
    overflow: hidden; display: inline-block; height: 20px; transition-duration: 0.75s;
}
.statusSelector input[type='checkbox']:checked+label{
    height: 0px;
}
.statusSelector input[type='text']:enabled{
    background-color: lightblue;
}
.statusSelector input[type='text']:hover{
    background-color: lightcoral;
}
.statusSelector input[type='text']:focus{
    background-color: lightgreen;
}
.statusSelector input[type='password']:disabled{
    background-color: lightgray;
}
.statusSelector input[type='password']:disabled::placeholder{
    color: darkslategray;
}
/* 
    ? statusSelector - 상태선택자.
    * :checked - check가 가능한 tag들의 check된 상태.
    * :selected - select tag내 선택된 option
    * :hover - 대상에 커서를 올려놨을 때
    * :focus - 대상에 초점이 맞춰졌을때 (outline발생된 상태)
    ! 절대 focus는 click대용이 될 수 없음.
    * :enabled - input계열 tag's 기본 옵션(조작이 가능한 상태)
    * :disabled - input계열 tag's 조작 불가 상태(저장이 되지 못하게 막아야 하는 상태)
    ! 절대적으로 readonly(저장된 값을 불러오되 수정불가)와 구분지어 사용해야 함.
    * ::placeholder - input계열 tag's 내 시각적 보조요소 상태.
*/
.virtualSelector ul{
    list-style: none; margin: 50px 0; padding: 0;
    background-color: red; overflow: hidden;
    /* 
    ! overflow를 이용해 float가 해제 되는 것은 올바른 방법이 아니다.
    ? (부모기준 높이 초과 되는 상황을 감지하기 때문에 얻어걸리는 케이스)
    * 다른목적에 의해 overflow를 사용하는 것이 아니라면 배운대로 :after Canceler를 장착해주는게 올바른 방법.
    */
}
.virtualSelector ul li{
    float: left; width: 14.28%; padding: 15px; box-sizing: border-box; text-align: center;
}
.virtualSelector ul li:first-child{
    border-radius: 20px 0 0 20px;
}
.virtualSelector ul li:nth-child(2n+1){
    background-color: #444; color: white;
}
.virtualSelector ul li:nth-child(2n){
    background-color: #09f;
}
.virtualSelector ul li:last-child{
    border-radius: 0 20px 20px 0;
}
/* https://css-tricks.com/examples/nth-child-tester/ */

/* .shapeSelector h1:nth-of-type(2){
    color: #30f;
}
.shapeSelector h2:first-of-type{
    color: #0c6;
}
.shapeSelector h3:last-of-type{
    color: #f06;
} */
 /* todo. -child로 같은결과 나오게 해보기 */
.shapeSelector h1:nth-child(6){
    color: #30f;
}
.shapeSelector h2:nth-child(2){
    color: #0c6;
}
.shapeSelector h3:nth-child(4){
    color: #f06;
}
/* 
    ? -child, -of-type
    * -child는 부모가 바라보는 자손의 순서대로 선택하는 선택자
    * -of-type은 자손들끼리의 순서로 선택하는 선택자.
    * first(첫),last(마지막)로 선택할 수있고 nth(숫자)로 n번째 지정이 가능하며 간단한 수열식활용가능
    ! 두 선택자 모두 되도록 앞에 대상 tag를 기재하는 것을 추천함 (ex> h1:first-child, h1:first-of-type..)
*/
.textSelector h1::first-letter{
    font-size: 100px; color: deeppink;
}
.textSelector p::first-line{
    font-size: 20px; line-height: 26px; color: limegreen; text-decoration: underline;
}
/* 
    ? 문자선택자 (딱히 중요하지 않음)
    ::first-letter 는 앞 글자만 선택할 때 사용.
    ::first-line 첫번째 줄만 선택할 때 사용.(화면너비에 따른 줄바꿈 감지)
*/
.backandfrontSelector p{
    counter-increment: rint;
}
.backandfrontSelector p::before{
    content: counter(rint) ". "; font-size: 20px; font-weight: bold; color: deeppink;
}
.backandfrontSelector p::after{
    content: "- " attr(data-page) "page"; font-size: 20px; font-weight: bold; color: dodgerblue;
}
/*
전후 문자선택자
::before : 선택된 태그의 앞 공간을 선택한다.
::after : 선택된 태그의 뒷 공간을 선택한다.
counter-increment:rint -> rint(인수에  가까운 정수 반환) 라는 카운터 이름을 만들어 낸다.
content:counter(rint) -> 카운터가 태그의 갯수 만큼 하나씩 올라가며 출력 되게 한다.
"-" => - 를 출력해라 / attr(data-page) => data-page로 설정 되어있는 부분을 출력하라.
/ "page" => page를 출력하라.

ul , ol 등의 리스트 형식에서 count를 사용 할 때는 counter-reset을 하고 사용 하는 것을
권장
ex > counter-reset: 카운터이름 0;
.backandfrontSelector ul li{counter-increment:rint;} -> 카운터이름을 선언
.backandfrontSelector ul li{counter-reset:rint 0;} -> 카운터 초기화
.backandfrontSelector p::before{content:counter(rint) ".";} -> 카운터 시작
.backandfrontSelector p::after{content:"-" attr(data-page) "page"; font-weight:bold; color:deeppink;} -> 출력


data- 라는 것은 사용자 지정 속성으로 웹 표준에서 인정 해주는 개인 자율에 의한
속성 지정법이다.
대부분의 솔루션, 템플릿, jquery등에서 널리 이용 되고 있으니, 반드시 알아 둘 것.

ex> data-roll="listview" 라고 선언 하면 jquery mobile ui 템플릿에서 기본으로 공급하는
모바일에서의 리스트 출력 작동법 및 스타일 이 된다.
*/
.reactionSelector *::selection{
    background-color: black; color: yellow;
}

.notSelector input:not([type='password'],[type='text']){
    background-color: lightcoral;
}