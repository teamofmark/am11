
.tagSelector h1{color:#0c0; font-size:20px;}
.tagSelector p{color:#0cf; font-size:15px;}
.tagSelector span{color:#336; font-size:13px;}

/*태그선택자 사용법*/

.idSelector p#paragraph1{font-size:16px; text-decoration:underline;}
.idSelector p#paragraph2{color:#09F; text-decoration:line-through;}
.idSelector p#paragraph3{font-weight:bold; text-decoration:overline;}

/*ID선택자 사용법*/

.classSelector p.f_size{font-size:20px;}
.classSelector p.f_weight{font-weight:bold;}
.classSelector p.f_color{color:#9cf;}

/*CLASS 선택자 사용법 + 다중 클래스 지정 */

.attrSelector fieldset{
    border: 1px solid #555; background-color: lightseagreen;
    border-radius: 20px 0 20px;
}
.attrSelector fieldset legend{
    border: 3px solid seagreen; background-color: #555; color: white;
    padding: 10px; border-radius: 20px 0 20px;
}
.attrSelector fieldset ul{
    margin: 0; padding: 0; list-style: none;
}
.attrSelector fieldset ul li{
    color: lavenderblush; font-size: 14px; line-height: 30px; margin-bottom: 10px;
}
.attrSelector fieldset ul li label{
    width: 100px; display: inline-block;
}
.attrSelector fieldset ul li input{
    line-height: 26px;
}
.attrSelector fieldset ul li input[type='text']{
    background-color: salmon; border: 3px solid lightyellow; color: maroon;
}
.attrSelector fieldset ul li input[id='password']{
    background-color: lightgreen; border: 3px solid lime;
}
.attrSelector fieldset ul li input[type='radio']{
    /* background-color: black; border: 5px solid yellow; */
    width: 25px; height: 25px;
}
.attrSelector fieldset ul li input[type='checkbox']{
    /* background-color: yellow; border: 5px solid red; */
    width: 25px; height: 25px;
}

.directSelector > h1{
    font-size: 24px; color: #66f;
}
.directSelector > span{
    font-size: 18px; color: #906; line-height: 24px; display: block;
}
/*
    구조적으로 다른 동일 태그를 제외하고, 직계 자손 객체 태그에 동일한 스타일을
    적용 할 수 있다.
*/
.sameSelector h1~h2{
    background-color: #333; color: white;
}
.sameSelector h1+h2{
    font-size: 40px; color: #fcf;
}
/*
    동위 선택자에서 A+B는 A 바로뒤에 위치하는 B를 지목하고,
    A~B는 A뒤에있는 B모두를 선택한다. (최초기준이 되는 tag만 효력이 있다.)
*/
.stringAttrSelector img[src$='png']{
    width: 100px; border: 3px solid #f00;
}
.stringAttrSelector img[src$='jpg']{
    width: 200px; border: 5px solid #0f0;
}
.stringAttrSelector img[src$='gif']{
    width: 300px; border: 10px solid #00f;
}
/* todo. 나머지 두개 img 조작해보기 */
.stringAttrSelector h1[title*="제목"]{
    color: red;
}
.stringAttrSelector h1[title^='남자']{
    color: blue;
}
.stringAttrSelector h1[title|='탈의실']{
    color:green;
}
/* 
    ? 문자열일치
    ? *= : 해당 문자가 들어가는 모든 대상 선택. (위치상관없음).
    ? $= : 해당 문자로 끝나는 대상 선택.
    ? ^= : 해당 문자로 시작하는 대상 선택.
    * |= : 해당 문자로 시작하거나 - 로 구분되는 대상.
    * ~= : 띄어쓰기 기준. 해당 문자 포함.
*/
.eventSelector a{
    display: block; margin-bottom: 30px; text-align: center; font-size: 14px;
    line-height: 24px; border-width: 3px; font-weight: bold;
}
.eventSelector a:link{/* ? 대상:link가 걸린 상태 = href attr을 지닌 상태. */
    border-style: dotted; border-color: lightslategray; color: #333;
    text-decoration: none;
}
.eventSelector a:hover{/* ? 대상: mouse cursor가 올라간 상태. */
    border-style: solid; border-color: seagreen; color: forestgreen;
    text-decoration: underline;
}
.eventSelector a:active{ /* ? 대상:click이 일어났을때*/
    border-style: double; border-color: salmon; background-color: darkslateblue;
    color: cyan; text-decoration: line-through;
}
.eventSelector a:visited{/* ? 대상:을 방문한 적이 있는 상태*/
    color: red; border-color: red;
}
.eventSelector a:focus{
    border: 5px solid deeppink;
}
.statusSelector input[type='checkbox']+label{
    display: inline-block; line-height:20px; background-color:yellow;
    overflow-y: hidden; transition-duration: 0.35s;
}
.statusSelector input[type='checkbox']:checked+label{
    line-height: 0px;
}
/* ! select option check -> selected */
.statusSelector input:enabled{
    background-color: black; color: white;
}
.statusSelector input:enabled::placeholder{
    color: yellow;
}
.statusSelector input:disabled{
    background-color: lightgray; color: gray;
}
.statusSelector input:disabled::placeholder{
    color:white;
}

.virtualSelector ul{
    overflow: hidden; list-style: none; margin: 30px 0; padding: 0;
}
/* ! overflow hidden -> floatCancel 가능. 단! 주목적 사용금지 (:after권장) */

.virtualSelector ul li{
    width: 14.28%; box-sizing: border-box; padding: 15px; float: left; text-align: center;
}
.virtualSelector ul li:nth-child(1){
    border-radius: 20px 0 0 20px;
}
.virtualSelector ul li:last-child{
    border-radius: 0 20px 20px 0;
}
.virtualSelector ul li:nth-child(2n+1){
    background-color: #444; color: white;
}
.virtualSelector ul li:nth-child(2n){
    background-color: #09f;
}
/* ! -child : 부모기준에서 바라보는 가상 선택자 이고 특정 수칙(수의규칙)을 이용할 수있다. */
/*
.shapeSelector h1:nth-of-type(2){color: #30f;} ! = h1:first-of-type 
.shapeSelector h2:first-of-type{color: #0c6;}
.shapeSelector h3:last-of-type{color: #f06;}
*/
/* todo. child로 같은결과 나오게 해보기 */
.shapeSelector :last-child{color: #30f;}
.shapeSelector :nth-child(2){color: #0c6;}
.shapeSelector :nth-child(4){color: #f06;}