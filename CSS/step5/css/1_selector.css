
.tagSelector h1{color:#0c0; font-size:20px;}
.tagSelector p{color:#0cf; font-size:15px;}
.tagSelector span{color:#336; font-size:13px;}

/*태그선택자 사용법*/

.idSelector p#paragraph1{font-size:16px; text-decoration:underline;}
.idSelector p#paragraph2{color:#09F; text-decoration:line-through;}
.idSelector p#paragraph3{font-weight:bold; text-decoration:overline;}

/*ID선택자 사용법*/

.classSelector p.f_size{font-size:20px;}
.classSelector p.f_weight{font-weight:bold;}
.classSelector p.f_color{color:#9cf;}

/*CLASS 선택자 사용법 + 다중 클래스 지정 */

.attrSelector fieldset{
    border: 1px solid #555; background-color: lightseagreen;
}
.attrSelector fieldset legend{
    border: 1px solid slateblue; background-color: #555; color: white; padding: 10px;
    border-radius: 10px 0 10px;
}
.attrSelector fieldset ul{
    margin: 0; padding: 0; list-style: none;
}
.attrSelector fieldset ul li{
    font-size: 14px; line-height: 30px; color: darkslateblue; margin-bottom: 10px;
}
.attrSelector fieldset ul li label{
    width: 100px; display: inline-block;
}
.attrSelector fieldset ul li input{
    padding: 5px; vertical-align: middle;
}
.attrSelector fieldset ul li input[type='text']{
    background-color: salmon; border: 3px solid lightyellow; color: maroon;
}
.attrSelector fieldset ul li input[type='password']{
    background-color: lightgreen; border: 3px solid lime; color: forestgreen;
}
.attrSelector fieldset ul li input[type='radio']{
    width: 25px; height: 25px;
    /* background-color: black; border: 5px solid yellow; */
}
.attrSelector fieldset ul li input[type='checkbox']{
    width: 25px; height: 25px;
    /* background-color: black; border: 5px solid yellowgreen; */
}
/* 
    * attrSelector -> tag의 attr을 기준으로 선택하는 방법
    ? 동작하는 input들은 기존 browser에서 설정된 style이 존재 하기 때문에 임의의 style 불가.
    ! 바꾸고싶은데....? 나중에 배워요. 
*/

.directSelector > h1{
    font-size: 28px; color: slateblue;
}
.directSelector > span{
    font-size: 22px; color: #906; line-height: 28px; border-bottom: 2px solid red;
}
/*
    * 직계선택자 >
    ? 구조적으로 다른 동일 태그를 제외하고, 직계 자손 객체 태그에 동일한 스타일을 적용 할 수 있다.
*/

.sameSelector h1~h2{
    background-color: #999;
}
.sameSelector h1+h2{
    font-size: 40px; color: #fcf;
}
/*
    * 동위 선택자
    ? A+B는 A 바로뒤에 위치하는 B를 지목하고, A~B는 A뒤에있는 B모두를 선택한다. (최초기준이 되는 tag만 효력이 있다.)
*/

.stringAttrSelector img[src$="png"]{
    width: 100px; border: 3px solid #f00;
}
/* todo. 나머지 두 이미지 선택해서 각각 다른 style 적용해보기 */

.stringAttrSelector img[src$='jpg']{
    width: 200px; border: 5px solid #0f0;
}
.stringAttrSelector img[src$='gif']{
    width: 300px; border: 10px solid #00f;
}
.stringAttrSelector h1[title *= "제목"]{
    color: red;
}
.stringAttrSelector h1[title ^= "남자"]{
    color: blue;
}
/* 
    * 문자열속성값일치선택자. - 해당 문자열 유형으로 분리 적용 할 수 있다.
    ? *= : 해당 단어가 들어가는 모든 대상 선택. (전,후 상관없음.)
    ? ^= : 해당 단어로 시작하는 것만 선택.
    ? $= : 해당 단어로 끝나는 대상 선택.
*/

.statusSelector input[type='checkbox']+label{
    display: inline-block; line-height: 20px; overflow-y: hidden; vertical-align: middle;
    transition-duration: 0.75s;
}
.statusSelector input[type='checkbox']:checked+label{
    line-height: 0px;
}
.statusSelector input:enabled{
    background-color: darkgray; color: white;
}
.statusSelector input:enabled::placeholder{
    color: yellow;
}
.statusSelector input:disabled{
    background-color: lightgray; color: gray;
}
.statusSelector input:disabled::placeholder{
    color: white;
}
/* ! select option check -> selected */
/*
    * 상태 선택자.
    ? input 상태에 따라 대상을 작동 시킬 수 있다.
    ? 1. checkbox의 상태가 checked 일 경우 바로 뒤에 label을 height:0px로 만든다.
    ? (상태옵션은 :checked 체크된 input 상태 , :focus 초점이 맞춰진 input 상태 , 
    ? :enabled 사용가능한 input 상태, :disabled 사용 불가능한 input 상태)
    
    ? 2. label의 기본설정을 잡는다. 이 부분에서 height의 값이 있어야만 에니메이션이
    ? 일어난다.
    ? 또한 display옵션을 block 계열로 잡아야하며, overflow의 값은 hidden으로 설정
    ? 해둔다.(사라지는값)
*/

.virtualSelector ul{
    overflow: hidden; list-style: none; margin: 30px 0; padding: 0;
}
.virtualSelector ul li{
    width: 14.28%; box-sizing: border-box; margin: 0; padding: 15px; float: left;
    text-align: center;
}
.virtualSelector ul li:first-child{
    border-radius: 10px 0 0 10px; 
}
.virtualSelector ul li:last-child{
    border-radius: 0 10px 10px 0;
}
.virtualSelector ul li:nth-child(2n+1){
    background-color: #444; color: white;
}
.virtualSelector ul li:nth-child(2n){
    background-color: #09f;
}