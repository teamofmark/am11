body{
    padding-bottom: 300px;
}
.tagSelector h1{color: #0c0; font-size: 20px;}
.tagSelector p{color: #0cf; font-size: 15px;}
.tagSelector span{color: #336; font-size: 12px;}

/* *tag Selector */

.idSelector #paragraph1 {font-size: 30px; text-decoration: underline;}
.idSelector #paragraph2 {font-size: 25px; text-decoration: line-through;}
.idSelector #paragraph3 {font-size: 20px; text-decoration: overline;}

/* *id Selector */

.classSelector .f_size{
    font-size: 20px;
}
.classSelector .f_weight{
    font-weight: bold;
}
.classSelector .f_color{
    color: steelblue;
}

/* *class Selector */

.attrSelector fieldset{
    border: 1px solid #555; background-color: steelblue;
}
.attrSelector fieldset legend{
    border: 1px solid #555; background-color: slateblue; color: mediumspringgreen;
    padding: 10px; border-radius: 10px;
}
.attrSelector fieldset ul{
    margin: 0; padding: 0; list-style: none;
}
.attrSelector fieldset ul li{
    font-size: 14px; line-height: 30px;
}
.attrSelector fieldset ul li label,
.attrSelector fieldset ul li input{
    vertical-align: middle; display: inline-block;
}
.attrSelector fieldset ul li input[type='text']{
    background-color: burlywood; border: 1px solid sienna;
}
.attrSelector fieldset ul li input[type='password']{
    background-color: lightseagreen; border: 1px solid greenyellow;
}
.attrSelector fieldset ul li input[type='radio']{
    width: 25px; height: 25px;
}
/* * checkbox, select */

.directSelector > h1{
    font-size: 28px; color: slateblue;
}
.directSelector > span{
    font-size: 14px; color: saddlebrown; display: block;
}

.stringAttrSelector img[src$=png]{
    width: 100px; height: 100px; border: 3px solid red;
}
.stringAttrSelector img[src$=gif]{
    width: 200px; height: 200px; border: 3px solid green;
}
.stringAttrSelector img[src$=jpg]{
    width: 300px; height: 300px; border: 3px solid blue;
}

.sameSelector h1 ~ h2{
    background-color: gray;
}
.sameSelector h1 + h2{
    font-size: 34px; color: pink;
}

.activeSelector h1{
    font-size: 12px; color: black;
}
.activeSelector h1:hover{
    font-size: 24px; color: darkgoldenrod; cursor: pointer;
}

.statusSelector input[type='checkbox'] + label{
    display: inline-block; vertical-align: middle; height: 25px; overflow-y: hidden;
    transition-duration: 0.75s;
    /* -ms-transition-duration:1s;
    -webkit-transition-duration:1s;
    -moz-transition-duration:1s;
    -o-transition-duration:1s; */
}
.statusSelector input[type='checkbox']:checked + label{
    height: 0px;
}
.statusSelector input[type='text']:enabled{
    background-color: black; color: white;
}
.statusSelector input[type='text']:disabled{
    background-color: deeppink; color: white;
}

.normalSelector ul:after{
    content: ''; display: block; visibility: hidden; clear: both;
}
.normalSelector ul li{
    float: left; margin: 0; padding: 15px; list-style: none;
    border: 1px solid black;
}
.normalSelector ul li:first-child{
    border-radius: 30px 0 0 30px;
}
.normalSelector ul li:last-child{
    border-radius: 0 30px 30px 0;
}
.normalSelector ul li:nth-child(even){
    background-color: #555; color: white;
}
.normalSelector ul li:nth-child(odd){
    background-color: #09f;
}
/*nth-child 에서 (odd) 값은 홀수를 , (even)은 짝수를 지정 할 수 있다. js는 반대 (0부터인식)*/

.normalSelector table{
	width:100%;
	border-width:3px 1px 2px 1px;
	border-style:solid;
	border-color:#3CF;
}
.normalSelector table caption{color:#666; font-size:12px; line-height:40px;}
.normalSelector table tr th,.normalSelector table tr td{
	width:14.28%;
	border-right:1px solid #3cf;
	border-bottom:1px solid #3cf;
	padding:10px 0;
}
.normalSelector table tr th{background-color:#6CF; }
.normalSelector table tr td{text-align:center;}
/*
normal selector의 브라우저별 지원 현황
IE : 9.0 ~ , FireFox : 3.5~ , safari: 3.1~, opera : 9.5 ~, chrome : 2.0 ~

    * http://nthmaster.com
*/
/* .shapeSelector h1:nth-of-type(2){
    color: #30f;
}
.shapeSelector h2:nth-of-type(1){
    color: #f06;
}
.shapeSelector h3:nth-of-type(2){
    color: #0f6;
} */
/* todo. second h1,h2,h3를 child로 선택해보기. */
.shapeSelector :last-child{
    color: #30f;
}
.shapeSelector :nth-child(5){
    color: #f06;
}
.shapeSelector :nth-child(4){
    color: #0f6;
}

/*
    * first-of-type, last-of-type은 형제 관계중 첫 번째 혹은 마지막으로 
    * 등장하는 지정된 태그를 선택마지막으로 등장하는 특정 태그를 선택한다.
    * nth-child와 마찬가지로 수열을 사용 할 수 있다.
    * 또한 전체선택자인 * 와 혼용하여 body > *:first-of-type{color:red} 이런식의 범위 지정도
    * 가능하다.
*/
.textSelector h1::first-letter{
    font-size: 100px; color: #09f;
}
.textSelector p::first-line{
    color: #090; text-decoration: underline;
}
.backandfrontSelector p{
    counter-increment: rint;
}
.backandfrontSelector p::before{
    content: counter(rint) ".";
}
.backandfrontSelector p::after{
    content:'-' attr(data-page) "page"; font-weight: bold; color: deeppink;
}

/*
전후 문자선택자
::before : 선택된 태그의 앞 공간을 선택한다.
::after : 선택된 태그의 뒷 공간을 선택한다.
counter-increment:rint -> rint(인수에  가까운 정수 반환) 라는 카운터 이름을 만들어 낸다.
content:counter(rint) -> 카운터가 태그의 갯수 만큼 하나씩 올라가며 출력 되게 한다.
"-" => - 를 출력해라 / attr(data-page) => data-page로 설정 되어있는 부분을 출력하라.
/ "page" => page를 출력하라.

ul , ol 등의 리스트 형식에서 count를 사용 할 때는 counter-reset을 하고 사용 하는 것을
권장
ex > counter-reset: 카운터이름 0;
.backandfrontSelector ul li{counter-increment:rint;} -> 카운터이름을 선언
.backandfrontSelector ul li{counter-reset:rint 0;} -> 카운터 초기화
.backandfrontSelector p::before{content:counter(rint) ".";} -> 카운터 시작
.backandfrontSelector p::after{content:"-" attr(data-page) "page"; font-weight:bold; color:deeppink;} -> 출력


data- 라는 것은 사용자 지정 속성으로 웹 표준에서 인정 해주는 개인 자율에 의한
속성 지정법이다.
대부분의 솔루션, 템플릿, jquery등에서 널리 이용 되고 있으니, 반드시 알아 둘 것.

ex> data-roll="listview" 라고 선언 하면 jquery mobile ui 템플릿에서 기본으로 공급하는
모바일에서의 리스트 출력 작동법 및 스타일 이 된다.
*/

.reactionSelector > *{
    color: white;
}
.reactionSelector > *::selection{
    background-color: black; color: yellow;
}

.notSelector input:not([type='text']){
    background-color: red;
}