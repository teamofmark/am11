body, ul, dl, dt, dd, figure{
    margin: 0; padding: 0;
}
div{
    margin-bottom: 30px;
}
.displayProperty span:nth-child(1){
    display: block; width: 50%; background-color: #fc9393;
}
.displayProperty span:nth-child(2){
    display: inline-block; width: 25%; background-color: #94fc93;
    padding: 30px; margin: 30px;
}
.displayProperty span:nth-child(3){
    display: inline; width: 75%; background-color: #93c5fc;
    padding: 30px; margin: 30px;
}
.displayProperty span:nth-child(4){
    display: none; width: 100%; background-color: deeppink;
}
/*
    ? display의 속성은 총 4가지
    * block = block이 되게 되면 width:100%의 값을 갖는 위에서 아래로 나열되는 객체가 된다.
    * inline-block = inline-block이 되면 width의 값을 가질수 있고, inline 타입으로 (옆으로) 나열되는 객체가 된다.
    * inline = inline이 되면 width등의 크기나 간격 등의 값을 가질수 없고 옆으로는 나열 되지만, 간격을 벌릴수 없는 객체가 된다.
    * none = 대상이 보이지 않는다. (렌더 자체가 안된다.)
*/
.visibilityProperty span{
    background-color: #ff6a00; display: block; border: 1px solid black;
}
.visibilityProperty span:first-child{
    visibility: visible;
}
.visibilityProperty span:nth-child(2){
    visibility: hidden; height: 500px;
}
.visibilityProperty table{
    visibility: collapse;
    /* ? display: none 처럼 작동 */
}
.visibilityProperty input[type='checkbox']:checked ~ table{
    visibility: visible;
}
/*
    ? visibility의 속성은 총 3가지
    * visibility : visible  = 보여주다.
    * visibility : hidden = 감추다.(영역보존)
    * visibility : collapse = 테이블만 감추다.
*/
.opacityProperty ul:after{
    content: ''; display: block; clear: both;
}
.opacityProperty ul li{
    float: left; display: block; width: 33%; background-color: black; position: relative;
}
.opacityProperty ul li:not(:first-child){
    margin-left: 0.5%;
}
.opacityProperty ul li figure img{
    width: 100%; opacity: 0.3; display: block; transition-duration: 0.5s;
    /* ? 1 -> 100% / 0.3 -> 30% */
}
.opacityProperty ul li:hover figure img{
    opacity: 1;
}
.opacityProperty ul li figure figcaption{
    position: absolute; left: 0; top: 0; width: 100%; height: 100%; color: white;
    background-color: rgba(0,0,0,0.5); display: flex; align-content: center;
    flex-flow: row wrap; text-align: center; transition-duration: 0.5s;
}
.opacityProperty ul li:hover figure figcaption{
    opacity: 0; top: -15%;
}
.opacityProperty ul li figure figcaption dl{
    width: 100%;
}
.opacityProperty ul li figure figcaption dl dt{
    font-size: 24px; font-weight: 600; margin-bottom: 10px;
}
.opacityProperty ul li figure figcaption dl dd{
    font-size: 14px; color: limegreen;
}
.boxsizingProperty div{
    width: 500px; margin: 0 auto; border: 10px solid #ff6a00;
    background-color: #fc9393; padding: 50px;
}
.boxsizingProperty div:first-child{
    box-sizing: content-box;
}
.boxsizingProperty div:last-child{
    box-sizing: border-box;
}
/*
    content-box 속성은 기본적으로 적용되는(default)값, 안의 공간을 해당 width로 잡고 밖에 padding,border를 추가
    계산 하여 총 width를 구하는 방식.
    border-box 속성은 전체 크기를 먼저 width로 잡고 안의 padding, border를 나중에 계산하는 방식

    content-box : box in width + padding + border = width
    border-box : width = box in width - (padding + border)
*/