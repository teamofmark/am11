body,ul,dl,dt,dd,figure{
    margin: 0; padding: 0;
}
div{
    margin-bottom: 30px;
}
.displayProperty span:nth-child(1){
    display: block; width: 50%; background-color: lightsalmon;
}
.displayProperty span:nth-child(2){
    display: inline-block; background-color: lightgreen;
    padding: 30px; margin: 30px; width: 25%;
}
.displayProperty span:nth-child(3){
    display: inline; background-color: lightblue;
    padding: 30px; margin: 30px; width: 70%;
}
.displayProperty span:nth-child(4){
    display: none;
    background-color: lightslategray; padding: 30px;
}
/*
    ? display의 속성은 총 4가지
    * block = block이 되게 되면 width:100%의 값을 갖는 위에서 아래로 나열되는 객체가 된다.
    * inline-block = inline-block이 되면 width의 값을 가질수 있고, inline 타입으로 (옆으로) 나열되는 객체가 된다.
    * inline = inline이 되면 width등의 크기나 간격 등의 값을 가질수 없고 옆으로는 나열 되지만, 간격을 벌릴수 없는 객체가 된다.
    * none = 대상이 보이지 않는다. (렌더 자체가 안된다.)
*/
.visibilityProperty span{
    background-color: orange; display: block; border: 1px solid black;
    height: 100px;
}
.visibilityProperty span:first-child{
    visibility: hidden;
    /* display: none; */
}
.visibilityProperty span:nth-child(2){
    visibility: visible;
}
.visibilityProperty input[type='checkbox']:checked ~ table{
    visibility: visible;
}
.visibilityProperty table{
    visibility: collapse; border-spacing: 0;
}
/* 
    visibility: collapse. display: none과 달리 존재하되 무너져있다. (data사전받기용이)
*/
.opacityProperty ul:after{
    content: ''; display: block; clear: both;
}
.opacityProperty ul li{
    display: block; float: left; width: 33%; background-color: black; position: relative;
    overflow-y: hidden;
}
.opacityProperty ul li:not(:first-child){
    margin-left: 0.5%;
}
.opacityProperty ul li figure img{
    width: 100%; display: block; opacity: 0.3; transition-duration: 0.5s;
}
.opacityProperty ul li:hover figure img{
    opacity: 1;
}
.opacityProperty ul li figure figcaption{
    position: absolute; left: 0; top: 0; width: 100%; height: 100%; display: flex;
    align-content: center; flex-flow: row wrap; text-align: center; justify-content: center;
    /* left: 25%; top: 25%; width: 50%; height: 50%;
    background-color: yellow; text-align: center; padding-top: 20%; box-sizing: border-box; */
    background-color: rgba(0,0,0,0.5); color: white; transition-duration: 0.5s;
}
.opacityProperty ul li:hover figure figcaption{
    opacity: 0; top: -100%;
}
.opacityProperty ul li figure figcaption dl dt{
    font-size: 24px; font-weight: 600; margin-bottom: 10px;
}
.opacityProperty ul li figure figcaption dl dd{
    font-size: 14px; color: limegreen;
}
/* 
    ? 부모공간내 자손을 수평,수직 중앙에 놓는 법
    * position : (부모 너비 혹은 높이) - (대상 너비 혹은 높이) / 2 -> 각 left, top 에 부여. -> 내부 적정 padding잡아주기
    * flex - flex시간에 배울예정
    
    ? transition 에서 effect와 관련된 code는 before / after로 구분 된다.
    * before에 변화가 일어나기 전 상태 모든 code가 있으면 되고,
    * after에서는 변화가 일어나는 code만 있으면 된다.
*/
.boxsizingProperty div{
    width: 500px; margin: 0 auto; border: 10px solid #ff6a00;
    background-color: #fc9393; padding: 50px;
}
.boxsizingProperty div:first-child{
    box-sizing: content-box;
}
.boxsizingProperty div:last-child{
    box-sizing: border-box;
}
/*
    content-box 속성은 기본적으로 적용되는(default)값, 안의 공간을 해당 width로 잡고 밖에 padding,border를 추가
    계산 하여 총 width를 구하는 방식.
    border-box 속성은 전체 크기를 먼저 width로 잡고 안의 padding, border를 나중에 계산하는 방식

    content-box : box in width + padding + border = width
    border-box : width = box in width - (padding + border)
*/