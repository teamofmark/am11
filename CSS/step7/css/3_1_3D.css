body{
    width: 200px; margin: 200px auto;
}
div{
    width: 200px;
}
div span{
    width: 200px; height: 200px; display: block;
    animation-iteration-count: infinite; animation-duration: 3s;
    animation-timing-function: ease-in-out;
    /* transform-style: preserve-3d; */
}
div.rotater span:nth-of-type(1){background-color: palegoldenrod; animation-name: hori;}
div.rotater span:nth-of-type(2){background-color: palegreen; animation-name: verti;}
div.rotater span:nth-of-type(3){background-color: paleturquoise; animation-name: depth;}
div.rotater span:nth-of-type(4){background-color: palevioletred; animation-name: rotate3D;}

@keyframes hori{
    from{
        transform: rotateX(0deg);
    }to{
        transform: rotateX(360deg);
    }
}
@keyframes verti{
    from{
        transform: rotateY(0deg);
    }to{
        transform: rotateY(360deg);
    }
}
@keyframes depth{
    from{
        transform: rotateZ(0deg);
    }to{
        transform: rotateZ(360deg);
    }
}
@keyframes rotate3D{
    from{
        transform: rotate3d(0,0,0, 0deg);
    }to{
        transform: rotate3d(1,1,1, 360deg);
    }
}
 /*
         rotate3D(x좌표, y좌표, z좌표, 회전각도);
         3개의 축을 동시 운용 할 경우(3D) 각 축의 기준점을 기재하면, 좌표가
         생성된다. 그래서 그 해당 좌표를 기준으로 3d로 회전을 하게 됨.
         만약 3개축이 모두 0일 경우 모든 축이 한점에 모이기 때문에 구현불가.
        */
div.translater span{
    background-color: peru; animation-name: trans3D;
}
@keyframes trans3D{
    from{
        transform: rotate3d(0,0,0,0deg) translate3d(0px, 0px, 0px) scale3d(0,0,0);
    }to{
        transform: rotate3d(1,1,1,360deg) translate3d(100px, 100px, 0px) scale3d(1,1,1);
    }
}
/* 
    ? translate3d(x축이동, y축이동, z축이동);
    * 각 축의 값만큼 해당 축으로 이동을 한다.
    ! z축은 깊이를 표현함에 있어, 단면 디스플레이의 특성상
    ! 큰 차이를 보이지 못한다. (-는 운동방향 이 반대로)
*/
/* 
    ? scale3d(x축scale, y축scale, z축scale)
    * scale3d는 벡터방식으로 크기 확장을 한다.
    ! 1이 100%의 scale, 0.1 = 10%의 scale
*/