
body{
    width: 200px; margin: 200px auto;
}
div{
    width: 200px;
}
div span{
    width: 200px; height: 200px; display: block;
    animation-iteration-count: infinite;
    animation-duration: 3s;
    animation-timing-function: ease;
    transform-style: preserve-3d;
}
div.rotater span:nth-of-type(1){
    background-color: red; animation-name: hori;
}
div.rotater span:nth-of-type(2){
    background-color: green; animation-name: verti;
}
div.rotater span:nth-of-type(3){
    background-color: blue; animation-name: depth;
}
div.rotater span:nth-of-type(4){
    background-color: yellow; animation-name: rotate3D;
}
@keyframes hori{
    from{transform: rotateX(0deg);}
    to{transform: rotateX(360deg);}
}
@keyframes verti{
    from{transform: rotateY(0deg);}
    to{transform: rotateY(360deg);}
}
@keyframes depth{
    from{transform: rotateZ(0deg);}
    to{transform: rotateZ(360deg);}
}
@keyframes rotate3D{
    from{transform: rotate3d(0,0,0,0deg);}
    to{transform: rotate3d(1,1,1,360deg);}
}
div.translater span{
    background-color: salmon; animation-name: trans3D;
}
@keyframes trans3D{
    from{
        transform: rotate3d(0,0,0,0deg) translate3d(0px, 0px, 0px) scale3d(0,0,0);
    }
    to{
        transform: rotate3d(1,1,1,360deg) translate3d(100px, 300px, 150px) scale3d(1,1,1);
    }
    /* 
        ? translate3d(x축이동, y축이동, z축이동);
        * 각 축의 값만큼 해당 축으로 이동을 한다.
        ! z축은 깊이를 표현함에 있어, 단면 디스플레이의 특성상
        ! 큰 차이를 보이지 못한다. (-는 운동방향 이 반대로)
    */
}