body{
    width: 200px; margin: 200px auto;
}
div{
    width: 200px;
}
div span{
    width: 200px; height: 200px; display: block; animation-iteration-count: infinite;
    animation-duration: 3s; animation-timing-function: ease;
}
div.rotater span:nth-of-type(1){background-color: red; animation-name: hori;}
div.rotater span:nth-of-type(2){background-color: green; animation-name: verti;}
div.rotater span:nth-of-type(3){background-color: blue; animation-name: depth;}
div.rotater span:nth-of-type(4){background-color: yellow; animation-name: rotate3D;}

@keyframes hori{
    0%{
        transform: rotateX(0deg);
    }
    100%{
        transform: rotateX(360deg);
    }
}
/* todo. rotateY, rotateZ, rotate3d(잘안되는거무시)를 각각의 키프레임셋을 만들어 (선언된 name준수) 적용해보기 */
@keyframes verti{
    0%{
        transform: rotateY(0deg);
    }
    100%{
        transform: rotateY(360deg);
    }
}
@keyframes depth{
    0%{
        transform: rotateZ(0deg);
    }
    100%{
        transform: rotateZ(360deg);
    }
}
@keyframes rotate3D{
    0%{
        transform: rotate3d(0,0,0,0deg);
    }
    100%{
        transform: rotate3d(1,1,1,360deg);
    }
    /*
     rotate3D(x좌표, y좌표, z좌표, 회전각도);
     3개의 축을 동시 운용 할 경우(3D) 각 축의 기준점을 기재하면, 좌표가
     생성된다. 그래서 그 해당 좌표를 기준으로 3d로 회전을 하게 됨.
     만약 3개축이 모두 0일 경우 모든 축이 한점에 모이기 때문에 구현불가.
    */
}

div.translater span{
    background-color: brown; color: #fff; animation-name: trans3D;
}
@keyframes trans3D{
    0%{
        transform: rotate3d(0,0,0,0deg) translate3d(0px, 0px, 0px) scale3d(0,0,0);
    }
    100%{
        transform: rotate3d(1,1,1,360deg) translate3d(100px, 150px, 150px) scale3d(1,1,1);
    }
}
/* 
    ? translate3d(x,y,z)축 이동
    * 각 축의 값만큼 해당 축으로 이동 한다.
    ! z축은 깊이를 표현함에 있어, 단면 디스플레이 특성상 큰 차이를 보이지 못한다. (-를 넣을경우 운동방향이 반대로..)
*/
div.scaler span{
    background-color: #ff00dc; animation-name: scale3D;
}
@keyframes scale3D{
    0%{
        transform: scale3d(0,0,0);
    }
    100%{
        transform: scale3d(1,1,1);
    }
}