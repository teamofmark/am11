/* 
    display: flex;
    부모요소가 block인 상태를 유지하고 직계자손들(auto flexItem)을 행으로 배치할 때.
    display: inline-flex;
    부모요소가 inline-block 상태를 가지고 직계자손들을 행으로 배치할 때.
*/
.flexContainer{
    margin: 10px; padding: 15px; border-radius: 25px; background-color: #a4a4a4;
    display: flex;
}
.flexContainer .flexItem{
    margin: 10px; padding: 20px; color: white; text-align: center; border-radius: 25px; background-color: black;
}
.flexContainer.inlineTest{
    display: inline-flex; width: 48%; box-sizing: border-box;
}
.flexContainer.direction{
    flex-direction: column-reverse;
}
/* 
    -direction: 
    flexContainer의 주축(mainAxis) 방향을 설정한다.
    row (ltr), row-reverse(rtl), column(TopToBottom), column-reverse(BottomToTop)
*/
.flexContainer.wrap{
    flex-wrap: wrap;
}
.flexContainer.wrap .flexItem{
    width: 500px;
}
/* 
    flex-wrap : 
    * flex-wrap속성은 flexContainer의 width보다 flexItem들의 width 합계가 큰 경우 한 줄로 나오게 할 것인지, 여러줄로 나오게 할 것인지 결정.
    nowrap(개행불허. 1행 모두배치. default. flexItem width 가능한 범위까지 자동축소)
    wrap(width 초과시 개행) - item width 설정시 %, max,min px설정 하여 원하는 타이밍 설정필요
    wrap-reverse(개행하되 역배치)
*/
.flexContainer.flow{
    flex-flow: row-reverse wrap-reverse;
    /* 
        -flow :
        direction, wrap 순서로 줄여쓰기.
        <flex-direction> | <flex-wrap>
    */
}
.flexContainer.flow .flexItem{
    width: 150px;
}

.flexContainer[class$='Content']{
    padding: 0;
}
.flexContainer[class$='Content'] .flexItem{
    margin: 0;
}
.flexContainer.justifyContent{
    justify-content: space-evenly;
}
.flexContainer.alignContent{
    flex-wrap: wrap; height: 400px;
    align-content: space-between; justify-content: space-between;
}
.flexContainer.alignContent .flexItem{
    width: 33.33%; max-width: 500px; min-width: 300px;
}

/* 
    ? justify-items:
    * flexItem을 parent Width기준으로 flexContainer의 수평 방향으로 정렬한다.
    * justify-items 속성은 모든 flexitem에 적용된다.

    * stretch (cross Start 에서 End까지 꽉찬 너비)
    * flex-start (cross Start 기준으로 정렬.)
    * flex-end (cross End 기준으로 정렬.)
    * center (flexContainer의 주축 중앙에 정렬.)
*/
.flexContainer.justifyItems{
    background-color: yellow; width: 300px; display: grid;
    justify-items: flex-start;
}
.flexContainer.justifyItems:hover{
    justify-items: flex-end;
}

    /* 
        ? align-items : 
        * flexItem을 line-height(contentHeight)기준으로 flexContainer의 수직 방향으로 정렬한다.
        * align-items 속성은 모든 flexItem에 적용된다.

        * stretch (cross Start 에서 End까지 꽉찬 높이)
        * flex-start (cross Start 기준으로 정렬.)
        * flex-end (cross End 기준으로 정렬.)
        * center  (flexContainer의 주축 중앙에 정렬.)
        * baseline (안의 컨텐츠 End 기준으로 정렬.)
    */
.flexContainer.alignItems{
    background-color: orange; align-items: baseline;
}
.flexContainer.alignItems:hover{
    align-items: stretch;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}
/* 
    ? justify-self:
    flexItem중 지정된 item에만 정렬 속성 적용.
    * stretch - 부모 공간 기준으로 자신의 너비 늘려 맞추기
    * flex-start - 부모 공간 기준으로 자신의 위치를 좌측으로 맞추기
    * center - 부모 공간 기준으로 자신의 위치를 중앙으로 맞추기
    * flex-end -부모 공간 기준으로 자신의 위치를 우측으로 맞추기
*/
.flexContainer.justifySelf{
    width: 220px; display: grid; background-color: skyblue;
}
.flexContainer.justifySelf .flexItem{
    justify-self: flex-start;
}
.flexContainer.justifySelf:hover .flexItem:nth-of-type(2n+1){
    justify-self: stretch;
}

/* 
    ? align-self:
    flexItem중 지정된 item에만 정렬 속성 적용.
    * stretch - 부모 공간 기준(자손중 가장 큰)으로 자신의 높이를 늘려 맞추기
    * flex-start - 부모 공간 기준(자손중 가장 큰)으로 자신의 위치를 상단으로 맞추기
    * center - 부모 공간 기준(자손중 가장 큰)으로 자신의 위치를 중앙으로 맞추기
    * flex-end -부모 공간 기준(자손중 가장 큰)으로 자신의 위치를 하단으로 맞추기
*/
.flexContainer.alignSelf{
    background-color: lightgreen;
}
.flexContainer.alignSelf .flexItem:nth-of-type(2n+1){
    align-self: center;
}
.flexContainer.alignSelf:hover .flexItem:nth-of-type(2n+1){
    align-self: flex-end;
}
.flexContainer.alignSelf .flexItem:nth-of-type(2){
    line-height: 80px;
}