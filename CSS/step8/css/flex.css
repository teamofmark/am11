.flexContainer{
    margin: 10px; padding: 15px; border-radius: 23px; background-color: #a4a4a4;
    display: flex;
    
    /* 
        기본
        display: flex;
        justify-content: space-around; ( flexItem 주변 동일 간격 유지 정렬 )
        ! 1. 부모 요소는 flex 혹은 inline-flex 로 지정되어야 한다.
        ? flex = 부모요소가 block 인 경우, inline-flex = 부모요소가 inline일 경우
        * 그러면 자동으로 이하 자식요소는 모두 flexItem이 된다.
    */
}
.flexItem,
.test a{
    margin: 10px; padding: 20px; color: white; text-align: center; border-radius: 27px;
    background-color: black; 
}
.test{
    border-radius: 23px; background-color: #a4a4a4;
    width: 49%; display: inline-flex;
}

.flexContainer.direction{
    flex-direction: column-reverse;
    /* 
    flex-direction : 
    flex-direction 속성은 flexContainer의 주축(main axis) 방향을 설정한다.

    row (ltr), row-reverse(rtl), column(TopToBottom), column-reverse(BottomToTop)
    */
}
.flexContainer.wrap{
    flex-wrap: wrap-reverse;
    /* 
        flex-wrap : 
        * flex-wrap속성은 flexContainer의 width보다 flexItem들의 width 합계가 큰 경우 한 줄로 나오게 할 것인지, 여러줄로 나오게 할 것인지 결정.

        nowrap(개행불허. 1행 모두배치. default. flexItem width 자동축소)
        wrap(width 초과시 개행)
        wrap-reverse(개행하되 역배치)
    */
}
.flexContainer.flow{
    flex-flow: row-reverse wrap-reverse;
    /* 
        flex-flow : 
        direction 과 wrap 을 줄여 쓸 수(shorthand)있다.

        <flex-direction> | <flex-wrap>;
        
    */
}
.flexContainer.justifyContent{
    justify-content: space-evenly; flex-wrap: wrap;
        /* 
        justify-content : 
        flex container의 main axis를 기준으로 flexItem을 수평 정렬한다.
        
        flex-start (flexItem을 좌측 기준정렬)
        flex-end (flexItem을 우측 기준정렬)
        center (flexItem을 가운데 기준정렬)
        space-between (flexItem 중 처음은 좌측기준, 마지막은 우측기준, 나머지는 동일간격으로 정렬)
        space-around (모든 flexItem은 기준없이 동일간격으로 정렬)
        space-evenly (여유 공간을 flex 항목 사이의 공간 및 시작선 및 끝선과 flex 항목 간의 공간에 모두 균등하게 배분.)
    */
}

.flexContainer.alignContent{
    height: 400px; flex-wrap: wrap;
    flex-direction: column;
    align-content: flex-start;
    justify-content: flex-end;
    /* 
        ! align(yAxis)
        align-content: (창조절필요)
        flex container의 cross axis를 기준으로 flexItem을 수직 정렬한다.
        
        stretch (flexItem 행 간격을 균등하게. cross Start에서 End까지 꽉찬 높이.)
        flex-start (flexItem 행 간격 없이 (stack))
        flex-end (flexContainer의 cross end 기준으로 행 간격 없이)
        center (flexContainer의 cross axis 중앙 기준으로 행 간격 없이)
        space-between (첫 행은 flexContainer cross start 기준, 마지막 행은 flexContainer cross end 기준, 나머지 행 균등하게)
        space-around (flexContainer 공간안에 모든 행 균등하게)
        space-evenly (여유 공간을 flex 항목 사이의 공간 및 시작선 및 끝선과 flex 항목 간의 공간에 모두 균등하게 배분.) 
    */
}

.flexContainer.justifyItems{
    background-color: yellow;
    display: grid;
    justify-items: flex-start;
    /* 
        ? justify-items:
        * flexItem을 parent Width기준으로 flexContainer의 수평 방향으로 정렬한다.
        * justify-items 속성은 모든 flexitem에 적용된다.
    
        * stretch (cross Start 에서 End까지 꽉찬 너비)
        * flex-start (cross Start 기준으로 정렬.)
        * flex-end (cross End 기준으로 정렬.)
        * center (flexContainer의 주축 중앙에 정렬.)
    */
}
.flexContainer.justifyItems:hover{
    justify-items: flex-end;
}
.flexContainer.justifyItems .flexItem{
    margin: 1px;
}
.flexContainer.alignItems{
    background-color: orange;
    align-items: baseline;
    /* 
        ? align-items : 
        * flexItem을 line-height(contentHeight)기준으로 flexContainer의 수직 방향으로 정렬한다.
        * align-items 속성은 모든 flexItem에 적용된다.

        * stretch (cross Start 에서 End까지 꽉찬 높이)
        * flex-start (cross Start 기준으로 정렬.)
        * flex-end (cross End 기준으로 정렬.)
        * center  (flexContainer의 주축 중앙에 정렬.)
        * baseline (안의 컨텐츠 End 기준으로 정렬.)
    */
}
.flexContainer.alignItems:hover{
    align-items: flex-start;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}