/* 
    display: flex;
    부모요소가 block인 상태를 유지하고 직계자손들(auto flexItem)을 행으로 배치할 때.
    display: inline-flex;
    부모요소가 inline-block 상태를 가지고 직계자손들을 행으로 배치할 때.
*/
.flexContainer{
    margin: 10px; padding: 15px; border-radius: 25px; background-color: #a4a4a4;
    display: flex;
}
.flexContainer .flexItem{
    margin: 10px; padding: 20px; color: white; text-align: center; border-radius: 25px; background-color: black;
}
.flexContainer.inlineTest{
    display: inline-flex; width: 48%; box-sizing: border-box;
}
.flexContainer.direction{
    flex-direction: column-reverse;
}
/* 
    -direction: 
    flexContainer의 주축(mainAxis) 방향을 설정한다.
    row (ltr), row-reverse(rtl), column(TopToBottom), column-reverse(BottomToTop)
*/
.flexContainer.wrap{
    flex-wrap: wrap;
}
.flexContainer.wrap .flexItem{
    width: 500px;
}
/* 
    flex-wrap : 
    * flex-wrap속성은 flexContainer의 width보다 flexItem들의 width 합계가 큰 경우 한 줄로 나오게 할 것인지, 여러줄로 나오게 할 것인지 결정.
    nowrap(개행불허. 1행 모두배치. default. flexItem width 가능한 범위까지 자동축소)
    wrap(width 초과시 개행) - item width 설정시 %, max,min px설정 하여 원하는 타이밍 설정필요
    wrap-reverse(개행하되 역배치)
*/
.flexContainer.flow{
    flex-flow: row-reverse wrap-reverse;
    /* 
        -flow :
        direction, wrap 순서로 줄여쓰기.
        <flex-direction> | <flex-wrap>
    */
}
.flexContainer.flow .flexItem{
    width: 150px;
}

.flexContainer[class$='Content']{
    padding: 0;
}
.flexContainer[class$='Content'] .flexItem{
    margin: 0;
}
.flexContainer.justifyContent{
    justify-content: space-evenly;
}
.flexContainer.alignContent{
    flex-wrap: wrap; height: 400px;
    align-content: space-between; justify-content: space-between;
}
.flexContainer.alignContent .flexItem{
    width: 33.33%; max-width: 500px; min-width: 300px;
}

/* 
    ? justify-items:
    * flexItem을 parent Width기준으로 flexContainer의 수평 방향으로 정렬한다.
    * justify-items 속성은 모든 flexitem에 적용된다.

    * stretch (cross Start 에서 End까지 꽉찬 너비)
    * flex-start (cross Start 기준으로 정렬.)
    * flex-end (cross End 기준으로 정렬.)
    * center (flexContainer의 주축 중앙에 정렬.)
*/
.flexContainer.justifyItems{
    background-color: yellow; width: 300px; display: grid;
    justify-items: flex-start;
}
.flexContainer.justifyItems:hover{
    justify-items: flex-end;
}

    /* 
        ? align-items : 
        * flexItem을 line-height(contentHeight)기준으로 flexContainer의 수직 방향으로 정렬한다.
        * align-items 속성은 모든 flexItem에 적용된다.

        * stretch (cross Start 에서 End까지 꽉찬 높이)
        * flex-start (cross Start 기준으로 정렬.)
        * flex-end (cross End 기준으로 정렬.)
        * center  (flexContainer의 주축 중앙에 정렬.)
        * baseline (안의 컨텐츠 End 기준으로 정렬.)
    */
.flexContainer.alignItems{
    background-color: orange; align-items: baseline;
}
.flexContainer.alignItems:hover{
    align-items: stretch;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}
/* 
    ? justify-self:
    flexItem중 지정된 item에만 정렬 속성 적용.
    * stretch - 부모 공간 기준으로 자신의 너비 늘려 맞추기
    * flex-start - 부모 공간 기준으로 자신의 위치를 좌측으로 맞추기
    * center - 부모 공간 기준으로 자신의 위치를 중앙으로 맞추기
    * flex-end -부모 공간 기준으로 자신의 위치를 우측으로 맞추기
*/
.flexContainer.justifySelf{
    width: 220px; display: grid; background-color: skyblue;
}
.flexContainer.justifySelf .flexItem{
    justify-self: flex-start;
}
.flexContainer.justifySelf:hover .flexItem:nth-of-type(2n+1){
    justify-self: stretch;
}

/* 
    ? align-self:
    flexItem중 지정된 item에만 정렬 속성 적용.
    * stretch - 부모 공간 기준(자손중 가장 큰)으로 자신의 높이를 늘려 맞추기
    * flex-start - 부모 공간 기준(자손중 가장 큰)으로 자신의 위치를 상단으로 맞추기
    * center - 부모 공간 기준(자손중 가장 큰)으로 자신의 위치를 중앙으로 맞추기
    * flex-end -부모 공간 기준(자손중 가장 큰)으로 자신의 위치를 하단으로 맞추기
*/
.flexContainer.alignSelf{
    background-color: lightgreen;
}
.flexContainer.alignSelf .flexItem:nth-of-type(2n+1){
    align-self: center;
}
.flexContainer.alignSelf:hover .flexItem:nth-of-type(2n+1){
    align-self: flex-end;
}
.flexContainer.alignSelf .flexItem:nth-of-type(2){
    line-height: 80px;
}
.flexContainer.orderItem .flexItem.order1{
    background-color: lightgreen; color: green; font-weight: bold;
    order: 0;
}
.flexContainer.orderItem .flexItem.order2{
    background-color: lightpink; color: deeppink; font-weight: bold;
    order: 1;
}
.flexContainer.orderItem .flexItem.order3{
    background-color: lightblue; color: midnightblue; font-weight: bold;
    order: -1;
}
.flexContainer.flexShortHand{
    width: 50%; margin: 0; padding: 0;
    /* max-width: 300px; */
}
.flexContainer.flexShortHand .flexItem{
    word-break: break-all; margin: 0; padding: 0;
}
.flexContainer.flexShortHand .flexItem:first-of-type{
    /* 1.팽창비 flex-grow: 2; flex-basis: 0; */
    /* shorthand - grow flex: 2 1 0; */
    /* 2. 수축비 flex-shrink: 2; flex-basis: 150px; */
    /* shorthand - shrink  flex: 0 2 150px;*/
   
    flex: 2 2 150px;
}
.flexContainer.flexShortHand .flexItem:first-of-type ~ *{
    /* 1.팽창비 flex-grow: 1; flex-basis: 0; */
    /* shorthand - grow flex: 1 1 0; */
    /* 2. 수축비 flex-shrink: 1; flex-basis: 150px; */
    /* shorthand - shrink flex: 0 1 150px;*/
    flex: 1 1 150px;
}
/* 
    flex-grow(팽창[확장]비[율]):
    각 item의 증가 비율을 정한다. default: 0. = 빈 공간을 알아서 확장하여 채우지 않는다.
    음수 비허용. 양수 입력시 '총 증가 내부팽창지수(grow합산)의 너비중 입력된 비율만큼의 너비를 가진다.
    단, max-width가 설정되면 해당 수치를 넘길 수 없다.
    ex> item이 3개. item들에게 grow가 1이 부여된다면 이는 각 1/3(33.33%)의 너비를 갖게 된다.

    현 상황 > 만약 전체 너비(300px가정)의 item 3개에 개별적인 grow가 부여되었다면?
    공식 : basis + (부모너비/내부팽창지수)*비율 = 증가된수치.
    .flexItem:first-of-type{flex-grow: 2;} > auto + (300/4)*2 = basis를 0 or 설정. 미기재는 안됨.
    > .flexItem:first-of-type{flex-grow: 2;} > 0 + (300/4)*2 = 150.
    > .flexItem:first-of-type ~ *{flex-grow: 1;} > 0 + (300/4)*1 = 75.

    flex-shrink(수축비) :
    기준되는 부모가 줄어들 때 각 item들의 수축비를 정한다. default : 1.
    음수 비허용. 양수 입력시 '총 수축 내부수축지수(shrink합산)의 너비중 입력된 비율만큼 수축될 수 있다.
    단, min-width가 설정되면 해당 수치 이하로 줄어들 수 없다.
    공식 : basis - (각너비/내부수축지수)*비율 = 감소된수치.
    현 상황 > 만약 수축중인 부모너비가 300px인 item 3개(각너비는 150px)의 수축비는
    .flexItem:first-of-type{flex-shrink:2;}-> auto -(150/4)*2= basis 미기재는 안됨.
    .flexItem:first-of-type{flex-shrink:2;}-> 150 - (150/4)*2=  75.
    .flexItem:first-of-type~*{flex-shrink:1;}-> 150 - (150/4)*1= 112.5.


    basis:
    item의 너비를 정한다. 기본값 auto.(안의 content 길이만큼 너비가 늘어난다.)
    다양한 단위 (px,percentages(%),rem,em,vw,vh...) 사용 가능.
    grow : 작동 기준 수치(ex > 100px - 100px 까지는 미가동)

*/
