.flexContainer{
    margin: 10px; padding: 15px;
    border-radius: 23px;
    background-color: #a4a4a4;
    display: flex;
}
.flexItem{
    margin: 10px; padding: 20px;
    color: white;
    background-color: black;
    text-align: center;
    border-radius: 27px;
}
.flexContainer.direction{
    flex-direction: column-reverse;
    /* 
    flex-direction : 
    flex-direction 속성은 flexContainer의 주축(main axis) 방향을 설정한다.

    row (ltr), row-reverse(rtl), column(TopToBottom), column-reverse(BottomToTop)
    */
}
.flexContainer.wrap{
    flex-wrap: wrap-reverse;
    /* 
        flex-wrap : 
        * flex-wrap속성은 flexContainer의 width보다 flexItem들의 width 합계가 큰 경우 한 줄로 나오게 할 것인지, 여러줄로 나오게 할 것인지 결정.

        nowrap(개행불허. 1행 모두배치. default. flexItem width 자동축소)
        wrap(width 초과시 개행)
        wrap-reverse(개행하되 역배치)
    */
}
.flexContainer.wrap .flexItem,
.flexContainer.flow .flexItem{
    width: 500px;
}
.flexContainer.flow{
    flex-flow: row-reverse wrap-reverse;
    /* 
        flex-flow : 
        direction 과 wrap 을 줄여 쓸 수(shorthand)있다.

        <flex-direction> | <flex-wrap>;
    */
}
.flexContainer.justifyContent{
    justify-content: space-evenly;
    padding: 0; margin: 0;
    /* 
        justify-content : 
        flex container의 main axis를 기준으로 flexItem을 수평 정렬한다.
        
        flex-start (flexItem을 좌측 기준정렬)
        flex-end (flexItem을 우측 기준정렬)
        center (flexItem을 가운데 기준정렬)
        space-between (flexItem 중 처음은 좌측기준, 마지막은 우측기준, 나머지는 동일간격으로 정렬)
        space-around (모든 flexItem은 기준없이 동일간격으로 정렬)
        space-evenly (여유 공간을 flex 항목 사이의 공간 및 시작선 및 끝선과 flex 항목 간의 공간에 모두 균등하게 배분.)
    */
}
.flexContainer.justifyContent .flexItem{
    margin: 0; padding: 0;
}
.flexContainer.alignContent{
    height: 400px;
    flex-wrap: wrap;
    justify-content: center;
    align-content: center;
    /* 
        ! align(yAxis)
        align-content: (창조절필요)
        flex container의 cross axis를 기준으로 flexItem을 수직 정렬한다.
        
        stretch (flexItem 행 간격을 균등하게. cross Start에서 End까지 꽉찬 높이.)
        flex-start (flexItem 행 간격 없이 (stack))
        flex-end (flexContainer의 cross end 기준으로 행 간격 없이)
        center (flexContainer의 cross axis 중앙 기준으로 행 간격 없이)
        space-between (첫 행은 flexContainer cross start 기준, 마지막 행은 flexContainer cross end 기준, 나머지 행 균등하게)
        space-around (flexContainer 공간안에 모든 행 균등하게)
        space-evenly (여유 공간을 flex 항목 사이의 공간 및 시작선 및 끝선과 flex 항목 간의 공간에 모두 균등하게 배분.) 
    */
}
.flexContainer.alignContent .flexItem{
    margin: 0;
}
.flexContainer.alignItems{
    background-color: orange;
    align-items: baseline;
}
.flexContainer.alignItems:hover{
    align-items: flex-end;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}
.flexContainer.justifyItems{
    background-color: yellow;
    display: grid;
    width: 300px;
}
.flexContainer.justifyItems:hover{
    justify-items: flex-start;
}
.flexContainer.alignSelf .flexItem:first-of-type{
    align-self: flex-end;
    /* 
        ?align-self
        * stretch - 요소들중 가장 높은 것을 기준으로 자신의 높이를 맞추기
        * flex-start - 요소들중 가장 높은 것의 윗선을 기준으로 자신을 맞추기
        * flex-end - 요소들중 가장 높은 것의 밑선을 기준으로 자신을 맞추기
    */
}
.flexContainer.alignSelf .flexItem:nth-of-type(2){
    line-height: 60px;
}
.flexContainer.justifySelf{
    width: 220px; display: grid;
}
.flexContainer.justifySelf .flexItem:first-of-type{
    justify-self: stretch;
}
.flexContainer.justifySelf:hover .flexItem:first-of-type{
    justify-self: flex-start;
}

.flexContainer.orderItem .flexItem.order1{
    order: -1;
    /* 
        order:
        flex container의 flexItem을 0(default)을 기본으로 적은 수일수록(음수가능) 먼저 배치한다. 
    */
}
.flexContainer.orderItem .flexItem.order2{
    order: -2;
}
.flexContainer.orderItem .flexItem.order3{
    order: -3;
}