.flexContainer{
    margin: 10px; padding: 15px; border-radius: 23px; background-color: #a4a4a4;
    display: flex;
    
    /* 
        기본
        display: flex;
        justify-content: space-around; ( flexItem 주변 동일 간격 유지 정렬 )
        ! 1. 부모 요소는 flex 혹은 inline-flex 로 지정되어야 한다.
        ? flex = 부모요소가 block 인 경우, inline-flex = 부모요소가 inline일 경우
        * 그러면 자동으로 이하 자식요소는 모두 flexItem이 된다.
    */
}
.flexItem,
.test a{
    margin: 10px; padding: 20px; color: white; text-align: center; border-radius: 27px;
    background-color: black; 
}
.test{
    border-radius: 23px; background-color: #a4a4a4;
    width: 49%; display: inline-flex;
}

.flexContainer.direction{
    flex-direction: column-reverse;
    /* 
    flex-direction : 
    flex-direction 속성은 flexContainer의 주축(main axis) 방향을 설정한다.

    row (ltr), row-reverse(rtl), column(TopToBottom), column-reverse(BottomToTop)
    */
}
.flexContainer.wrap{
    flex-wrap: wrap-reverse;
    /* 
        flex-wrap : 
        * flex-wrap속성은 flexContainer의 width보다 flexItem들의 width 합계가 큰 경우 한 줄로 나오게 할 것인지, 여러줄로 나오게 할 것인지 결정.

        nowrap(개행불허. 1행 모두배치. default. flexItem width 자동축소)
        wrap(width 초과시 개행)
        wrap-reverse(개행하되 역배치)
    */
}
.flexContainer.flow{
    flex-flow: row-reverse wrap-reverse;
    /* 
        flex-flow : 
        direction 과 wrap 을 줄여 쓸 수(shorthand)있다.

        <flex-direction> | <flex-wrap>;
        
    */
}
.flexContainer.justifyContent{
    justify-content: space-evenly; flex-wrap: wrap;
        /* 
        justify-content : 
        flex container의 main axis를 기준으로 flexItem을 수평 정렬한다.
        
        flex-start (flexItem을 좌측 기준정렬)
        flex-end (flexItem을 우측 기준정렬)
        center (flexItem을 가운데 기준정렬)
        space-between (flexItem 중 처음은 좌측기준, 마지막은 우측기준, 나머지는 동일간격으로 정렬)
        space-around (모든 flexItem은 기준없이 동일간격으로 정렬)
        space-evenly (여유 공간을 flex 항목 사이의 공간 및 시작선 및 끝선과 flex 항목 간의 공간에 모두 균등하게 배분.)
    */
}

.flexContainer.alignContent{
    height: 400px; flex-wrap: wrap;
    flex-direction: column;
    align-content: flex-start;
    justify-content: flex-end;
    /* 
        ! align(yAxis)
        align-content: (창조절필요)
        flex container의 cross axis를 기준으로 flexItem을 수직 정렬한다.
        
        stretch (flexItem 행 간격을 균등하게. cross Start에서 End까지 꽉찬 높이.)
        flex-start (flexItem 행 간격 없이 (stack))
        flex-end (flexContainer의 cross end 기준으로 행 간격 없이)
        center (flexContainer의 cross axis 중앙 기준으로 행 간격 없이)
        space-between (첫 행은 flexContainer cross start 기준, 마지막 행은 flexContainer cross end 기준, 나머지 행 균등하게)
        space-around (flexContainer 공간안에 모든 행 균등하게)
        space-evenly (여유 공간을 flex 항목 사이의 공간 및 시작선 및 끝선과 flex 항목 간의 공간에 모두 균등하게 배분.) 
    */
}

.flexContainer.justifyItems{
    background-color: yellow;
    display: grid;
    justify-items: flex-start;
    /* 
        ? justify-items:
        * flexItem을 parent Width기준으로 flexContainer의 수평 방향으로 정렬한다.
        * justify-items 속성은 모든 flexitem에 적용된다.
    
        * stretch (cross Start 에서 End까지 꽉찬 너비)
        * flex-start (cross Start 기준으로 정렬.)
        * flex-end (cross End 기준으로 정렬.)
        * center (flexContainer의 주축 중앙에 정렬.)
    */
}
.flexContainer.justifyItems:hover{
    justify-items: flex-end;
}
.flexContainer.justifyItems .flexItem{
    margin: 1px;
}
.flexContainer.alignItems{
    background-color: orange;
    align-items: baseline;
    /* 
        ? align-items : 
        * flexItem을 line-height(contentHeight)기준으로 flexContainer의 수직 방향으로 정렬한다.
        * align-items 속성은 모든 flexItem에 적용된다.

        * stretch (cross Start 에서 End까지 꽉찬 높이)
        * flex-start (cross Start 기준으로 정렬.)
        * flex-end (cross End 기준으로 정렬.)
        * center  (flexContainer의 주축 중앙에 정렬.)
        * baseline (안의 컨텐츠 End 기준으로 정렬.)
    */
}
.flexContainer.alignItems:hover{
    align-items: flex-start;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}
.flexContainer.justifySelf{
     background-color: coral; display: grid;
    /* 
        ?justify-self
        * stretch - 내부 공간 기준으로 자신의 너비 맞추기
        * flex-start - 내부 공간 기준으로 자신의 위치를 좌측으로 맞추기
        * flex-end - 내부 공간 기준으로 자신의 위치를 우측으로 맞추기
    */
}
.flexContainer.justifySelf .flexItem:nth-of-type(1){width: 100px;}
.flexContainer.justifySelf .flexItem:nth-of-type(2){width: 200px;}
.flexContainer.justifySelf .flexItem:nth-of-type(3){width: 300px;}
.flexContainer.justifySelf .flexItem:nth-of-type(4){width: 400px;}
.flexContainer.justifySelf .flexItem:nth-of-type(5){width: 500px;}
.flexContainer.justifySelf:hover .flexItem:first-of-type{
    justify-self: flex-end;
}
.flexContainer.alignSelf{
    height: 500px;
}
/* .flexContainer.alignSelf .flexItem:first-of-type{
    align-self: flex-end;
} */
/* .flexContainer.alignSelf .flexItem:nth-of-type(2){
    line-height: 60px;
} */
.flexContainer.alignSelf .flexItem:nth-of-type(1){align-self: flex-start; width: 30%;}
.flexContainer.alignSelf .flexItem:nth-of-type(2){align-self: center; width: 20%;}
.flexContainer.alignSelf .flexItem:nth-of-type(3){align-self: flex-end; width: 10%;}
.flexContainer.alignSelf .flexItem:nth-of-type(4){align-self: baseline;}
.flexContainer.alignSelf .flexItem:nth-of-type(5){align-self: auto;}


.flexContainer.orderItem .flexItem:first-of-type{
    order: 1;
}

.flexContainer.orderItem .flexItem:last-of-type{
    order: -1;
}
/* 
    order:
    flex container의 flexItem을 0(default)을 기본으로 적은 수일수록(음수가능) 먼저 배치한다. 
*/

.flexContainer.flexShortHand{
    width: 50%; margin: 0; padding: 0;
    max-width: 300px;
}
.flexContainer.flexShortHand .flexItem{
    margin: 0; padding: 0; word-break: break-all;
}
.flexContainer.flexShortHand .flexItem:first-child{
    /* flex-grow: 2; flex-basis: 0; */
    flex-shrink: 2;
    flex-basis: 150px;
}
.flexContainer.flexShortHand .flexItem:first-child~*{
    /* flex-grow: 1; flex-basis: 0; */
    flex-shrink: 1;
    flex-basis: 150px;
}
/* 
    flex : grow shrink basis;

    ? flex-grow(팽창(확장)비):
    ! item의 증가비율을 정한다. default: 0. 즉, 빈 공간을 알아서 확장하여 채우지 않는다.
    ! 음수 비허용. 양수 입력 시 '총 증가 내부팽창지수(grow합산)의 너비중 입력된 비율만큼의 너비를 가진다.
    ! 단, max-width가 설정되면 해당 수치를 넘지 않는다.
    * example. item이 3개이고 item들에게 grow가 1이 부여된다면 각각 1/3(33.33%)의 너비를 갖게 된다.

    ?ex.1 > 만약 전체 너비 (300px)의 item 3개에 개별적으로 grow가 부여되었다면?
    todo. flexItem:first-child{flex-grow:2;} -> 0(basis) + (300/4)*2 = 150.
    todo. flexItem:first-child~*{flex-grow:1;} -> 0(basis) + (300/4)*1 = 75.
    ? why 3(x) 4? = first 2 +  ~* 1 + 1.
    
    ? flex-shrink(수축비):
    ! 기준되는 부모(절대)가 줄어들 때 item의 수축비를 정한다. default: 1.
    ! 음수 비허용. 양수 입력 시 '총 수축 내부수축지수(shrink합산)의 너비 중 입력된 비율 만큼 수축될 수 있다.
    ! 단, min-width가 설정되면 해당 수치를 넘지 않는다. (basis -> max로 변환 가동)
    * example. item이 3개이고 item들에게 shrink가 1이 부여된다면 각각 1/3의 수축비를 갖게된다.
    ?ex. 2 > 만약 수축중인 부모 너비가 300px인 item 4개(각너비 150px)에  shrink를 부여하면?
    todo. 초과되는 수치인 150 에 대한. shrink총합인 4를 나눈 37.5가 곧 shrink: 1이된다.
    todo. flexItem:first-child{flex-shrink: 2;} -> 150(대상너비) - (150/4)*2 = 75;
    todo. flexItem:first-child~*{flex-shrink: 1;} -> 150(대상너비) - (150/4)*1 = 112.5;
    
    basis:
    !item의 너비를 정한다. 기본값은 auto 이며 다양한 단위 percen
    
    !주의
    !1. shorthand로 묶어 사용할 시엔 따로 auto라고 선언하지 않으면 0이 된다.
    !2. width와 중복될 경우 basis가 우선시 되기 떄문에 중복하여 사용할 필요없다.
    !3. content 값은 사용 할 수 없다. 만약 어쩔수 없는 상황이라면 auto로 풀고 width를 사용하지 말아야 한다.

    ?ex.3 > 만약 전체 너비(300px) 를 item 3개의 너비(width:150px)합(150*3 = 450px) 이 넘어가는 상황이 된다면 ?
    
    item기본 크기 + ( free space / 수축지수 총 합 ) * flex-shrink 값 = flex item 크기.
    150+(-150/3)*1=100
    이런식으로 자동 수축된다.tages(%) || ems || rems || pixels 를 사용 할 수있다.
    * auto : 안의 컨텐츠의 길이만큼 너비가 늘어난다.
*/
/*
    * 생략되는 형식
    flex: none;
    flex-grow:0; flex-shrink:0; flex-basis:auto; 상태가 된다.

    flex: <flex-grow>
    flex-shrink:1; flex-basis:0; 상태가 된다.

    flex: <flex-basis>
    flex-grow:1; flex-shrink:1; 상태가 된다.

    flex: <flex-grow> <flex-shrink>
    flex-basis:0; 상태가 된다.

    flex: <flex-grow> <flex-basis>
    flex-shrink:1; 상태가 된다.

    flex: <flex-grow> <flex-shrink> <flex-basis>
    생략한 속성 없음.

    1. flex: 0 1 auto; : 확장비는 존재 하지 않고 (남은공간을 채우지 않는다.), 수축만 일어나며 컨텐츠의 너비만큼 너비가 설정된다.
    2. flex: none; : 확장비, 수축비 모두 존재하지 않는다.(남은공간을 채우지도 수축도 일어나지 않는다.)  컨텐츠의 너비만큼 너비가 설정된다.
    3. flex: auto; : 1 1 auto 와 같다. 확장비, 수축비 모두 컨텐츠 갯수만큼 비율로 분배되어 갖게 되고, 컨텐츠의 너비만큼 너비가 설정된다.
    !만약 그 너비가 컨텐츠 보다 작을땐 item이 container의 너비를 넘는다. (스크롤바 발생) word-break : break-all 로 제어.

    ! 모든 항목에서 알아둬야할 사항.
    ! 1. 플렉스 아이템의 크기가 각자 다른 경우 남은공간은 균등하게 분배되지 않고 플렉스 아이템 크기에 정비례하여 분배 된다.
    ! 2. container 와 item에 적용된 margin,padding의 영향으로 오차가 발생 될 수 있다.
*/