.flexContainer{
    background-color: #a4a4a4; padding: 15px;
    margin: 10px; display: flex;
}
.flexItem{
    margin: 10px; padding: 20px; color: white;
    text-align: center; background-color: black;
    border-radius: 27px;
}

.flexContainer.direction{
    flex-direction: column-reverse;
    /* 
    flex-direction : 
    flex-direction 속성은 flexContainer의 주축(main axis) 방향을 설정한다.

    row (ltr), row-reverse(rtl), column(TopToBottom), column-reverse(BottomToTop)
    */
}
.flexContainer.wrap{
    flex-wrap: wrap-reverse;
    /* 
        flex-wrap:
        *flex-wrap 속성은 flexContainer의 width보다 flexItem들의 width의 합이 더 큰 경우,
        *한줄로 처리 할 것인지, 여러줄로 처리 할 것인지 결정 가능.
        ? nowrap : 개행불허. 1행 모두 배치. (width를 가변시킨다.)
        ? wrap : 초과시 개행.
        ? wrap-reverse : 초과시 개행 하되 역배치.
    */
}
.flexContainer.wrap .flexItem{
    width: 500px;
}


.flexContainer.flow{
    flex-flow: row-reverse wrap-reverse;
    /* 
        flex-flow : direction과 wrap을 줄여 쓸 수 (shorthand) 있다.
        ?<flex-direction> | <flex-wrap>;
    */
}
.flexContainer.flow .flexItem{
    width: 500px;
}

.flexContainer.justifyContent{
    padding: 0;
    justify-content: space-evenly;
    /* 
        ? justify-content:
        * flexContainer의 mainAxis를 기준으로 flexItem을 수평정렬한다.
        * flex-start : (flexItem을 좌측 기준 정렬)
        * center : (flexItem을 가운데 기준 정렬)
        * flex-end : (flexItem을 우측 기준 정렬)
        
        *space-between: (flexItem중 처음은 좌측기준, 마지막은 우측기준, 나머지는 동일간격)
        *space-around: (모든 flexItem의 기준을 없앤 상태로 동일 간격 정렬.)
        *space-evenly: (여유공간을 flex 항목 사이의 공간,시작선,끝선과 flex 항목간의 공간에 모두 균등하게 배분.)
    */
}
.flexContainer.justifyContent .flexItem{
    margin: 0; 
}

.flexContainer.alignContent{
    flex-wrap: wrap; justify-content: space-around; align-content: space-around;
    padding: 0; height: 400px;
    /* 
        ! align(yAxis)
        align-content: (창조절필요)
        flex container의 cross axis를 기준으로 flexItem을 수직 정렬한다.
        
        stretch (flexItem 행 간격을 균등하게. cross Start에서 End까지 꽉찬 높이.)
        flex-start (flexItem 행 간격 없이 (stack))
        flex-end (flexContainer의 cross end 기준으로 행 간격 없이)
        center (flexContainer의 cross axis 중앙 기준으로 행 간격 없이)
        space-between (첫 행은 flexContainer cross start 기준, 마지막 행은 flexContainer cross end 기준, 나머지 행 균등하게)
        space-around (flexContainer 공간안에 모든 행 균등하게)
        space-evenly (여유 공간을 flex 항목 사이의 공간 및 시작선 및 끝선과 flex 항목 간의 공간에 모두 균등하게 배분.) 
    */
}
.flexContainer.alignContent .flexItem{
    margin: 0;
}

.flexContainer.alignItems{
    background-color: orange;
    align-items: baseline;
}
.flexContainer.alignItems:hover{
    align-items: flex-end;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}
/* 
    ?align-items : 
    * flexItem을 line-height 기준으로 flexContainer의 수직방향 정렬
    * align-items 속성은 모든 flexItem에 적용된다.

    * stretch (cross Start 에서 End까지 꽉찬 높이)
    * flex-start (cross Start 기준으로 정렬)
    * flex-end (cross End 기준으로 정렬)
    * center (flexContainer의 주축 중앙에 정렬)
    * baseline (안의 content end 기준으로 정렬.)
*/

.flexContainer.justifyItems{
    background-color: yellow; display: grid; width: 500px;
    justify-items: stretch;
}
.flexContainer.justifyItems .flexItem{
    margin: 1px;
}
.flexContainer.justifyItems:hover{
    justify-items: flex-start;
}
/* 
    ? justify-items:
    * flexItem을 parent Width기준으로 flexContainer의 수평 방향으로 정렬한다.
    * justify-items 속성은 모든 flexitem에 적용된다.

    * stretch (cross Start 에서 End까지 꽉찬 너비)
    * flex-start (cross Start 기준으로 정렬.)
    * flex-end (cross End 기준으로 정렬.)
    * center (flexContainer의 주축 중앙에 정렬.)
*/

/* !이하 item */

/* frontEnd -> css -> layout skill -> flex.(float x) */

.flexContainer.orderItem .flexItem.order1{
    order: 0;
}
.flexContainer.orderItem .flexItem.order2{
    order: 0;
}
.flexContainer.orderItem .flexItem.order3{
    order: -1;
}
/* 
    ? order:
    * flexContainer의 flexItem을 0(default)을 기준으로 적은 수 일수록(음수가능) 먼저배치.
*/
.flexContainer.flexShortHand{
    width: 50%; margin: 0; padding: 0;
}
.flexContainer.flexShortHand .flexItem{
    word-break: break-all; margin: 0; padding: 0;
}
.flexContainer.flexShortHand .flexItem:first-child{
    /* *ex.1 grow ex> flex-grow: 2; flex-basis: 0; */

    /* *ex.2 */
    flex-shrink: 2; flex-basis: 150px;

    /*
        ? basis -> max or min
        ? grow -> basis = max.
        ? shrink -> basis = min.
        ! basis(x) -> max or min.
    */
}
.flexContainer.flexShortHand .flexItem:first-child~*{
    /* *ex.1 grow ex>  flex-grow: 1; flex-basis: 0; */

    /* *ex.2 */
    flex-shrink: 1; flex-basis: 150px;
}
/* 
    ? grow:
    ! item의 확장비를 정한다. 기본값 0. 즉, 빈 공간을 알아서 확장하며 채우지는 않는다.
    ! 음수 비허용, 양수를 입력시(비율값) 총 증가 내부팽창지수(grow합산)의 너비 중 입력된 비율 만큼 너비를 가질 수 있다.
    ! basis or max-width가 설정되면 해당 수치를 넘지 않는다.
    * ex> item이 3개, item들에게 grow가 1이 부여된다면 -> 각각 1/3의 너비를 갖는다.
    
    ? ex> 전체 너비 (300px)의 item 3개에 개별적으로 grow가 부여되었다?
    ? .flexItem:first-child{flex-grow: 2;} // 0(basis) + (300/4)*2 = 150.
    ? why 4? = first 2 + ~* 1(x2)
    ? .flexItem:first-child~*{flex-grow: 1;} // 0(basis) + (300/4)*1 = 75.

    
    ?shrink:
    !브라우저가 줄어들 때 item의 수축비를 정한다. 기본값은 1로 설정된다.
    ! 음수는 허용되지 않고, 양수를 입력 하였을 때 총 수축 내부수축지수(shrink합산)의 너비 중 입력된 비율 만큼 수축 될수 있다.
    ! min-width가 설정되면 해당 수치를 넘지 않는다.
    ! 예를 들어 item이 3개이고 item들에게 shrink가 1이 부여된다면 각각 1/3의 수축비를 갖게된다.

    ?ex.2 > 만약 수축중인 전체 너비(300px)의 item 3개(각 width:150px)에 개별적으로 shrink가 부여되었다면?
    .flexItem>:first-child{flex-shrink:4} // 150+(-150/6)*4=50
    .flexItem>:first-child~*{flex-shrink:1} // 150+(-150/6)*1=125
    
    ? basis:
    ! item의 너비를 정한다. 기본값은 auto 이며 다양한 단위 percentages(%) || ems || rems || pixels 를 사용 할 수있다.
    ! auto : 안의 컨텐츠의 길이만큼 너비가 늘어난다.
*/
/* 
    ! 주의
    ! 1. shorthand로 묶어 사용할 시엔 따로 auto라고 선언하지 않으면 0이 된다.
    ! 2. width와 중복될 경우 basis가 우선시 되기 때문에 중복사용 금지.
    ! 3. content 값은 사용 할 수 없다. 만약 어쩔 수 없는 상황이라면 auto로 풀고 width를 사용하지 말아야 한다.

    * 생략되는 형식
    ? flex: none;
    ? = flex-grow: 0; flex-shrink: 0; flex-basis: auto;

    ? flex: <flex-grow>
    ? = flex-shrink: 1; flex-basis: 0;

    ? flex: <flex-basis>
    ? = flex-grow: 1; flex-shrink: 1;

    ? flex: <flex-grow> <flex-shrink>
    ? = flex-basis: 0;

    ? flex: <flex-grow> <flex-basis>
    ? = flex-shrink: 1;

    ! flex: 0 1 auto; 남는공간을 채우지 않는다. > 수축만 일어나며 content의 너비만큼 너비가 설정.
    ! flex: none; = 자동계산 및 가변 불가.(ex> mobile..) > 남는공간을 채우지도 줄어들지도 않는다. content의 너비만큼 너비가 설정.
    ! flex: auto; = 1 1 auto. > content 개수만큼 비율로 분배되고, content의 너비만큼 너비가 설정.(만약 그 너비가 content보다 작을때 -> item이 container의 너비를 넘는다.)

    ! 모든 항목에서 알아둬야할 사항.
    ! 1. flexItem의 크기가 각자 다른 경우, 남은 공간은 균등하게 분배되지 않고 flexItem의 크기에 정비례하여 분배된다.
    ! 2. container의 item에 적용된 margin, padding의 영향으로 오차 발생.
*/