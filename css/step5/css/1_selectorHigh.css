
.tagSelector h1{color:#0c0; font-size:20px;}
.tagSelector p{color:#0cf; font-size:15px;}
.tagSelector span{color:#336; font-size:13px;}

/*태그선택자 사용법*/

.idSelector p#paragraph1{font-size:16px; text-decoration:underline;}
.idSelector p#paragraph2{color:#09F; text-decoration:line-through;}
.idSelector p#paragraph3{font-weight:bold; text-decoration:overline;}

/*ID선택자 사용법*/

.classSelector p.f_size{font-size:20px;}
.classSelector p.f_weight{font-weight:bold;}
.classSelector p.f_color{color:#9cf;}

/*CLASS 선택자 사용법 + 다중 클래스 지정 */

.attrSelector fieldset{
    border: 1px solid #555; background-color: #9cf;
} 
.attrSelector fieldset legend{
    border: 1px solid #555; background-color: #9cf;
}
.attrSelector ul{
    margin:0; padding:0; list-style: none;
}
.attrSelector ul li{
    color: #444; font-size: 14px; line-height: 30px;
}
.attrSelector ul li label{
    width: 110px; display: inline-block;
}
.attrSelector ul li input,
.attrSelector ul li label{
    vertical-align: middle;
}
.attrSelector ul li input[type='text']{
    background-color: #966; border: 1px solid #c00; color: white;
}
.attrSelector ul li input[type='password']{
    background-color: #fc0; border: 1px dotted #ff0; color: black;
}
.attrSelector ul li input[type='radio']{
    background-color: black; border: yellow; width: 25px; height: 25px;
}

/*같은 태그라도 타입에 따라 선택 할 수 있다.*/

.directSelector > h1{
    font-size: 28px; color: #66f;
}
.directSelector > span{
    font-size: 22px; color: #906;
}
/*
    구조적으로 다른 동일 태그를 제외하고, 직계 자손 객체 태그에 동일한 스타일을
    적용 할 수 있다.
*/

.stringAttrSelector img[src$=png]{
    width: 100px; height: 100px; border: 3px solid #f00;
}
.stringAttrSelector img[src$=jpg]{
    width: 200px; height: 200px; border: 5px solid #0f0;
}
.stringAttrSelector img[src$=gif]{
    width: 300px; height: 300px; border: 10px solid #00f;
}
/*문자열 선택자는 해당 문자열 유형으로 분리 적용 할 수 있다.(계륵)*/

.sameSelector h1~h2{
    background-color: #333;
}
.sameSelector h1+h2{
    font-size: 40px; color :#fcf;
}
/*
    동위 선택자에서 A+B는 A 바로뒤에 위치하는 B를 지목하고,
    A~B는 A뒤에있는 B모두를 선택한다.
*/

.activeSelector h1:hover{
    font-size:35px; color: #0f0; cursor: pointer;
}
/*반응선택자 - 링크 수업 부분 과 동일*/

.statusSelector input[type='checkbox'] + label{
    overflow: hidden; display: inline-block; vertical-align: middle;
    height: 25px; transition-duration:0.75s;
    -ms-transition-duration:1s;
    -webkit-transition-duration:1s;
    -moz-transition-duration:1s;
    -o-transition-duration:1s;
}
.statusSelector input[type='checkbox']:checked + label{
    height: 0px;
}

.statusSelector input[type='text']:enabled{
    background-color: black; color: white;
}
.statusSelector input[type='text']:disabled{
    background-color: deeppink; color: black;
}
/*
input 상태에 따라 대상을 작동 시킬 수 있다.
1. checkbox의 상태가 checked 일 경우 바로 뒤에 label을 height:0px로 만든다.
(상태옵션은 :checked 체크된 input 상태 , :focus 초점이 맞춰진 input 상태 , 
:enabled 사용가능한 input 상태, :disabled 사용 불가능한 input 상태)

2. label의 기본설정을 잡는다. 이 부분에서 height의 값이 있어야만 에니메이션이
일어난다.
또한 display옵션을 block 계열로 잡아야하며, overflow의 값은 hidden으로 설정
해둔다.(사라지는값)

3.벤더프리픽스를 통해 각 브라우저별 애니메이션을 설정한다.

-p.s- 크로스브라우징을 해야 할 때, 모든 브라우저를 테스트 하지말고,
ie 와 chrome 만 테스트를 하면 firefox 와 safari는 대부분 동일하게 적용 된다. 
*/

.normalSelector ul{
    overflow: hidden; list-style:none;
}
/*
    float 해제 방법 -2 
    float 대상의 바로 윗 부모에게
    ex> .normalSelector ul:after{content:''; display:block; clear:both; visibility:hidden;}
*/

.normalSelector ul li{
    margin:0; padding:15px; float: left;
}
.normalSelector ul li:first-child{
    border-radius:10px 0 0 10px;
}
.normalSelector ul li:last-child{
    border-radius: 0 10px 10px 0;
}
.normalSelector ul li:nth-child(odd){
    background-color: #444; color:  white;
}
.normalSelector ul li:nth-child(even){
    background-color: #09f;
}
/*nth-child 에서 (odd) 값은 홀수를 , (even)은 짝수를 지정 할 수 있다. js는 반대 (0부터인식)*/

.normalSelector table{
	width:100%;
	border-width:3px 1px 2px 1px;
	border-style:solid;
	border-color:#3CF;
}
.normalSelector table caption{color:#666; font-size:12px; line-height:40px;}
.normalSelector table tr th,.normalSelector table tr td{
	width:14.28%;
	border-right:1px solid #3cf;
	border-bottom:1px solid #3cf;
	padding:10px 0;
}
.normalSelector table tr th{background-color:#6CF; }
.normalSelector table tr td{text-align:center;}
/*
normal selector의 브라우저별 지원 현황
IE : 9.0 ~ , FireFox : 3.5~ , safari: 3.1~, opera : 9.5 ~, chrome : 2.0 ~

    * http://nthmaster.com

*/

/* todo. second h1,h2,h3 선택해보기  */
/* 
    * .shapeSelector :nth-child(6){color: #30f;}
    * .shapeSelector :nth-child(5){color: #0c6;}
    * .shapeSelector :nth-child(4){color: #f06;} 
*/

.shapeSelector h1:nth-of-type(2){color: #30f;}
.shapeSelector h2:nth-of-type(2){color: #0c6;}
.shapeSelector h3:nth-of-type(2){color: #f06;}


/*
    * first-of-type, last-of-type은 형제 관계중 첫 번째 혹은 마지막으로 
    * 등장하는 지정된 태그를 선택마지막으로 등장하는 특정 태그를 선택한다.
    * nth-child와 마찬가지로 수열을 사용 할 수 있다.
    * 또한 전체선택자인 * 와 혼용하여 body > *:first-of-type{color:red} 이런식의 범위 지정도
    * 가능하다.
*/

.textSelector h1::first-letter{
    font-size:100px; color: #09f;
}
.textSelector p::first-line{
    color: #090; line-height: 30px; font-size: 14px;
    text-decoration: underline;
}
/*
    문자 선택자
    ::first-letter (:로도 작동 되지만, ::가 정석) 는 앞 글자만 선택 할 때 사용한다.
    ::first-line 첫번째 줄만을 선택 한다.
*/

.backandfrontSelector p{
    counter-increment: rint;
}
.backandfrontSelector p::before{
    content:counter(rint) ".";
}
.backandfrontSelector p::after{
    content:"-" attr(data-page) "page"; font-weight: bold; color: deeppink;
}

/*
전후 문자선택자
::before : 선택된 태그의 앞 공간을 선택한다.
::after : 선택된 태그의 뒷 공간을 선택한다.
counter-increment:rint -> rint(인수에  가까운 정수 반환) 라는 카운터 이름을 만들어 낸다.
content:counter(rint) -> 카운터가 태그의 갯수 만큼 하나씩 올라가며 출력 되게 한다.
"-" => - 를 출력해라 / attr(data-page) => data-page로 설정 되어있는 부분을 출력하라.
/ "page" => page를 출력하라.

ul , ol 등의 리스트 형식에서 count를 사용 할 때는 counter-reset을 하고 사용 하는 것을
권장
ex > counter-reset: 카운터이름 0;
.backandfrontSelector ul li{counter-increment:rint;} -> 카운터이름을 선언
.backandfrontSelector ul li{counter-reset:rint 0;} -> 카운터 초기화
.backandfrontSelector p::before{content:counter(rint) ".";} -> 카운터 시작
.backandfrontSelector p::after{content:"-" attr(data-page) "page"; font-weight:bold; color:deeppink;} -> 출력


data- 라는 것은 사용자 지정 속성으로 웹 표준에서 인정 해주는 개인 자율에 의한
속성 지정법이다.
대부분의 솔루션, 템플릿, jquery등에서 널리 이용 되고 있으니, 반드시 알아 둘 것.

ex> data-roll="listview" 라고 선언 하면 jquery mobile ui 템플릿에서 기본으로 공급하는
모바일에서의 리스트 출력 작동법 및 스타일 이 된다.
*/

.reactionSelector > *{
    color: #fff;
}

.reactionSelector > *::selection{
    background-color: #000; color: #ff0;
}

.notSelector input:not([type='password']){
    background-color: red;
}

/*
	:not은 부정 선택자로써 대상을 제외한 나머지에게 해당 css를 적용시킨다.
*/

.sameAttrSelector input[class ~= "button"]{
    background-color: red; color: white;
}
.sameAttrSelector h1[title *= "제목"]{
    color: red;
}
.sameAttrSelector h2[title ^= "남자"]{
    color: blue;
}
.sameAttrSelector h2[title ^= "여자"]{
    color: pink;
}
/*
    속성값일치선택자
    class로 검출하여, 스타일을 적용하거나, 
    h1 등 마크업의 속성값의 일치 여부를 체크하여 적용한다.
    ^ 캐럿을 이용하면 해당 텍스트로 시작하는 것만 선택하여 적용한다.
    이외
    a [href $=".zip"] {background:url(images/zip_icon.gif);}
    파일확장자 별 스타일
    * a [class |= "red"] {background-color:red;}
    * class이름의 "시작 단어"가 중복되는 모든 클래스에 스타일주기
    p[class *="accent"] {font-style:italic;}
    p클래스 중 accent가 들어가는 모든 클래스에 스타일주기(전,후상관없음)
*/