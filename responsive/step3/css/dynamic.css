/*
변수선언 
@ColumnWidth: 6.5%;
@GutterWidth: 2%;

믹스인 
.span(@column){
    width: (@ColumnWidth * @column) + (@GutterWidth * (@column - 1));
}

연산 
.span_1{.span(1);}
.span_2{.span(2);}
.span_3{.span(3);}
.span_4{.span(4);}
.span_5{.span(5);}
.span_6{.span(6);}
.span_7{.span(7);}
.span_8{.span(8);}
.span_9{.span(9);}
.span_10{.span(10);}
.span_11{.span(11);}
.span_12{.span(12);}

.container{
    margin: 0; padding: 0;
}
.row{
    overflow: hidden; width: 100%;
}
[class *= span]{
    float: left;
    margin-left: @GutterWidth;
    &:first-child{
        margin-left: 0;
    }
}
*/
.span_1 {
    width: 6.5%;
  }
  .span_2 {
    width: 15%;
  }
  .span_3 {
    width: 23.5%;
  }
  .span_4 {
    width: 32%;
  }
  .span_5 {
    width: 40.5%;
  }
  .span_6 {
    width: 49%;
  }
  .span_7 {
    width: 57.5%;
  }
  .span_8 {
    width: 66%;
  }
  .span_9 {
    width: 74.5%;
  }
  .span_10 {
    width: 83%;
  }
  .span_11 {
    width: 91.5%;
  }
  .span_12 {
    width: 100%;
  }
  .container {
    margin: 0;
    padding: 0;
  }
  .row {
    overflow: hidden;
    width: 100%;
  }
  [class*=span] {
    float: left;
    margin-left: 2%;
  }
  [class*=span]:first-child {
    margin-left: 0;
  }
  
  /* 
    ? less를 이용한 grid(동적) style 
    *1. ColumnWidth = (100 - (ColumnCount - 1) * GutterWidth) / ColumnCount;
    *2. 이걸 풀어내면 (100 - 11 * 2) / 12 = 6.5 라는 ColumnWidth가 산출.
    *3. 이 값을 span에 width로 넣어주어  각 span들의 columnWidth를 잡아주고
    *4. [class*=span]의 margin-left에 GutterWidth 2%를 적용
    *5. class*=span의 first-child에는 margin-left 0적용
    ! 각각의 공식에 따라

    !ex> .span(1){
    !       width: (6.5 * 1) + (2 * (1 - 1)) = 6.5
    !}
    !ex> .span(2){
    !       width: (6.5 * 2) + (2 * (2 - 1)) = 15
    !}
  */